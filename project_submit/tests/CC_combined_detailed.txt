Coverage Report by file with details

Total Coverage By File (code coverage only, filtered view): 88.0%

File: draw_any_octant.vhd
Statement Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Stmts                        8         8         0     100.0

================================Statement Details================================

Statement Coverage for file draw_any_octant.vhd --

    1                                              LIBRARY IEEE;
    2                                              
    3                                              USE IEEE.std_logic_1164.ALL;
    4                                              USE IEEE.numeric_std.ALL;
    5                                              
    6                                              
    7                                              PACKAGE dao IS
    8                                                
    9                                                TYPE xy IS (xcoord,ycoord);
    10                                               
    11                                               TYPE control IS
    12                                               RECORD
    13                                                 swapxy, negx, negy: std_logic;
    14                                               END RECORD;
    15                                               
    16                                             END PACKAGE dao;
    17                                             
    18                                             
    19                                             
    20                                             
    21                                             LIBRARY IEEE;
    22                                             
    23                                             USE IEEE.std_logic_1164.ALL;
    24                                             USE IEEE.numeric_std.ALL;
    25                                             USE WORK.dao.ALL;
    26                                             
    27                                             
    28                                             
    29                                             ENTITY draw_any_octant IS
    30                                               
    31                                               -- swapxy negx  negy  octant
    32                                               --  0      0      0     ENE
    33                                               --  1      0      0     NNE
    34                                               --  1      1      0     NNW
    35                                               --  0      1      0     WNW
    36                                               --  0      1      1     WSW
    37                                               --  1      1      1     SSW
    38                                               --  1      0      1     SSE
    39                                               --  0      0      1     ESE
    40                                             
    41                                               -- swapxy: x & y swap round on inputs & outputs
    42                                               -- negx:   invert bits of x on inputs & outputs
    43                                               -- negy:   invert bits of y on inputs & outputs
    44                                             
    45                                               -- xbias always give nias in x axis direction, 
    46                                               -- so swapxy must invert xbias
    47                                               
    48                                               GENERIC(
    49                                             	vsize1: INTEGER := 6
    50                                             	);
    51                                             	
    52                                               PORT(
    53                                                 clk, resetx, draw, xbias, disable : IN  std_logic;
    54                                                 xin, yin                : IN  std_logic_vector(vsize1-1 DOWNTO 0);
    55                                                 done                    : OUT std_logic;
    56                                                 x, y                    : OUT std_logic_vector(vsize1-1 DOWNTO 0);
    57                                                 swapxy,negx,negy        : IN std_logic
    58                                                 );
    59                                             END ENTITY draw_any_octant;
    60                                             
    61                                             ARCHITECTURE comb OF draw_any_octant IS
    62                                             
    63                                               SUBTYPE vvec IS std_logic_vector(vsize1-1 DOWNTO 0);
    64                                             
    65                                               TYPE xycoord IS ARRAY (xy) OF vvec;
    66                                             
    67                                             
    68                                               FUNCTION swap(z:xycoord; c: control) RETURN xycoord IS
    69                                               BEGIN
    70                                                 IF c.swapxy = '1' THEN
    71            1                    1117466           RETURN (z(ycoord), z(xcoord));
    72                                                 ELSE
    73            1                    1150539           RETURN z;
    74                                                 END IF;
    75                                               END FUNCTION swap;
    76                                             
    77                                               FUNCTION inv(z: xycoord; c: control) RETURN xycoord IS
    78                                               BEGIN
    79            1                    2268005         RETURN (z(xcoord) XOR vvec'(OTHERS=>c.negx), z(ycoord) XOR vvec'(OTHERS=>c.negy));
    80                                               END FUNCTION inv;
    81                                                 
    82                                             
    83                                               SIGNAL xyin_i, xy_i: xycoord;
    84                                               SIGNAL xbias_i: std_logic;
    85                                               SIGNAL c, c_delayed: control;
    86                                             
    87                                             BEGIN
    88                                             
    89                                             
    90                                             
    91                                             
    92                                             
    93                                               D_O: ENTITY  WORK.draw_octant
    94                                                 GENERIC MAP(
    95                                                   vsize => vsize1
    96                                                 )
    97                                                 PORT MAP (
    98                                                   disable => disable,
    99                                                   clk   => clk,
    100                                                  init => resetx,
    101                                                  draw  => draw,
    102                                                  xbias => xbias_i,
    103                                                  xin   => xyin_i(xcoord),
    104                                                  yin   => xyin_i(ycoord),
    105                                                  done  => done,
    106                                                  x     => xy_i(xcoord),
    107                                                  y     => xy_i(ycoord)
    108                                                  );
    109                                              
    110                                              R1: PROCESS
    111                                              BEGIN
    112                                                WAIT UNTIL clk'EVENT and clk='1';
    113           1                   68250641         c_delayed <= c;
    114                                              END PROCESS R1;
    115                                              
    116           1                     316206       xyin_i <= swap( inv((xin, yin), c), c);
    117           1                    1951799       (x,y) <= inv( swap(xy_i, c_delayed), c_delayed);
    118                                              
    119           1                      71283       xbias_i <= xbias XOR swapxy;
    120           1                      95873       c <= (swapxy, negx, negy);
    121                                            
    122                                            END ARCHITECTURE comb;

Branch Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Branches                     2         2         0     100.0

================================Branch Details================================

Branch Coverage for file draw_any_octant.vhd --

------------------------------------IF Branch------------------------------------
    70                                 2268005     Count coming in to IF
    70            1                    1117466         IF c.swapxy = '1' THEN
    72            1                    1150539         ELSE
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Condition Terms          0         0         0     100.0
Expression Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Expression Terms         2         2         0     100.0

================================Expression Details================================

Expression Coverage for file draw_any_octant.vhd --

----------------Focused Expression View-----------------
Line       119 Item    1   xbias_i <= xbias XOR swapxy;
Expression totals: 2 of 2 input terms covered = 100.0%

  Input Term   Covered  Reason for no coverage                  Hint
 -----------  --------  --------------------------------------  --------------
       xbias         Y
      swapxy         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Matching input patterns(->0)         Matching input patterns(->1)
---------  ----------  ----------  --------------------  -----------------------------------  -----------------------------------
 Row   1:       18055       17640  xbias_0               { 00 }                               { 01 }
 Row   2:       17493       18094  xbias_1               { 11 }                               { 10 }
 Row   3:       18055       18094  swapxy_0              { 00 }                               { 10 }
 Row   4:       17493       17640  swapxy_1              { 11 }                               { 01 }

NOTE:
  * Order of matching input pattern values: {xbias,swapxy}


FSM Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    States                       0         0         0     100.0
    Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Toggle Bins                 38        38         0     100.0

================================Toggle Details================================

Toggle Coverage for File draw_any_octant.vhd --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
         54                                 yin(5)           1           1                              100.00 
         54                                 yin(4)           1           1                              100.00 
         54                                 yin(3)           1           1                              100.00 
         54                                 yin(2)           1           1                              100.00 
         54                                 yin(1)           1           1                              100.00 
         54                                 yin(0)           1           1                              100.00 
         54                                 xin(5)           1           1                              100.00 
         54                                 xin(4)           1           1                              100.00 
         54                                 xin(3)           1           1                              100.00 
         54                                 xin(2)           1           1                              100.00 
         54                                 xin(1)           1           1                              100.00 
         54                                 xin(0)           1           1                              100.00 
         84                                xbias_i           1           1                              100.00 
         85                       c_delayed.swapxy           1           1                              100.00 
         85                         c_delayed.negy           1           1                              100.00 
         85                         c_delayed.negx           1           1                              100.00 
         85                               c.swapxy           1           1                              100.00 
         85                                 c.negy           1           1                              100.00 
         85                                 c.negx           1           1                              100.00 

Total Node Count     =         19 
Toggled Node Count   =         19 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (38 of 38 bins)

File: draw_octant.vhd
Statement Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Stmts                       25        25         0     100.0

================================Statement Details================================

Statement Coverage for file draw_octant.vhd --

    1                                              -- Thomas Clarke 2013
    2                                              -- draw-octant entity modified for variable size vectors
    3                                              -- used in VHDL & Logic Synthesis Coursework
    4                                              
    5                                              LIBRARY IEEE;
    6                                              
    7                                              USE IEEE.std_logic_1164.ALL;
    8                                              USE IEEE.numeric_std.ALL;
    9                                              
    10                                             ENTITY draw_octant IS
    11                                               GENERIC(vsize: INTEGER := 6);
    12                                               PORT(
    13                                                 clk, init, draw, xbias, disable : IN  std_logic;
    14                                                 xin, yin                 : IN  std_logic_vector(vsize-1 DOWNTO 0);
    15                                                 done                     : OUT std_logic;
    16                                                 x, y                     : OUT std_logic_vector(vsize-1 DOWNTO 0)
    17                                                 );
    18                                             END ENTITY draw_octant;
    19                                             
    20                                             ARCHITECTURE comb OF draw_octant IS
    21                                             
    22                                               SIGNAL done1                    : std_logic; -- internal done
    23                                               SIGNAL x1, y1                   : unsigned(vsize-1 DOWNTO 0); -- internal x,y
    24                                               SIGNAL xincr, yincr, xnew, ynew : unsigned(vsize-1 DOWNTO 0);
    25                                               -- note on vector sizes. err1,err2 must be one bit larger to preserve signed error info
    26                                               -- error is always adjusted to minimise absolute value of signed error and therefore 
    27                                               -- can never be larger than vsize bits even though also signed, 12 bits is enough
    28                                               SIGNAL error                    : signed(vsize-1 DOWNTO 0);
    29                                               SIGNAL err1, err2               : unsigned(vsize DOWNTO 0);
    30                                             
    31                                             -- OPERATION
    32                                             --
    33                                             -- line drawing is initiated by asserting init and draw in successive cycles.
    34                                             -- this loads the initial and final coordinates of the line to be drawn into
    35                                             -- (x,y) and xnew,ynew0 respectively
    36                                             -- drawing must be in ENE octant which implies xincr >= 0, yincr >= 0, xincr >= yincr
    37                                             -- here xincr = x - xnew, yincr = y - ynew
    38                                             --
    39                                             -- Through the drawing process (x,y) represent a new point to be plotted on line each cycle.
    40                                             -- error represents the signed
    41                                             --
    42                                             -- xbias determines whether line goes in x direction or xy direction when both directions have
    43                                             -- equal offset from the true line.
    44                                             --
    45                                             -- done is asserted in the final cycle when x=xnew, y=ynew.
    46                                             
    47                                             --NOTES ON DATA STRUCTURES
    48                                             -- The basic data here is a (x,y) coordinate
    49                                             -- it would make sense to use a record type for this:
    50                                             -- TYPE coord IS RECORD x,y: std-logic_vector(vsize-1 DOWNTO 0) END RECORD;
    51                                             -- then decalre internal datas tructures of type coord.
    52                                             -- the result would be neater, and for example testing the end condition could 
    53                                             -- be equality on records which works (like equality on arrays)
    54                                             
    55                                             
    56                                             BEGIN
    57                                               -- assign to ports from internal signals
    58            1                    1854007       x    <= std_logic_vector(x1);
    59            1                     821344       y    <= std_logic_vector(y1);
    60            1                     120099       done <= done1;
    61                                             
    62            1                    2097764       C1 : PROCESS(error, xincr, yincr, x1, y1, xnew, ynew, init, draw)
    63                                                 
    64                                               BEGIN
    65                                             
    66            1                    2097764         err1 <= unsigned(abs(resize(error, vsize+1) + signed(resize(yincr,vsize+1))));
    67            1                    2097764         err2 <= unsigned(abs(resize(error, vsize+1) - signed(resize(unsigned(xincr - yincr),vsize+1))));
    68                                             
    69            1                    2097764         done1 <= '0';
    70                                                 IF x1 = xnew and y1 = ynew and init = '0' and draw = '0' THEN
    71            1                      60049           done1 <= '1';
    72                                                 END IF;
    73                                             
    74                                               END PROCESS C1;
    75                                             
    76                                               R1 : PROCESS
    77                                             
    78                                               BEGIN
    79                                                 WAIT UNTIL clk'event AND clk = '1';
    80                                                 IF disable = '0' THEN
    81                                                   IF init = '1' THEN
    82            1                      60049             x1    <= unsigned(xin);
    83            1                      60049             y1    <= unsigned(yin);
    84            1                      60049             xincr <= (OTHERS => '0');
    85            1                      60049             yincr <= (OTHERS => '0');
    86            1                      60049             xnew  <= unsigned(xin);
    87            1                      60049             ynew  <= unsigned(yin);
    88            1                      60049             error <= (OTHERS => '0');
    89                                                   
    90                                                   ELSIF draw = '1' THEN
    91            1                      60049             xincr <= unsigned(xin) - x1;
    92            1                      60049             yincr <= unsigned(yin) - y1;
    93            1                      60049             xnew  <= unsigned(xin);
    94            1                      60049             ynew  <= unsigned(yin);
    95                                                   
    96                                                   ELSIF done1 = '1' THEN
    97            1                   32282096             NULL; -- do nothing more once line has finished until next init
    98                                             
    99                                             	  ELSE    -- draw new pixel
    100                                                 
    101                                                    IF err1 > err2 OR (err1 = err2 AND xbias = '0') THEN --check new pixel direction
    102                                                      -- draw new pixel in diagonal direction
    103           1                     769989               y1    <= y1 + 1;
    104           1                     769989               x1    <= x1 + 1;
    105           1                     769989               error <= error + signed(yincr) - signed(xincr);
    106                                                    ELSE
    107                                                      -- draw new pixel in x direction
    108           1                    1027542               x1    <= x1 + 1;
    109           1                    1027542               error <= error + signed(yincr);
    110                                                 
    111                                                    END IF;
    112                                            
    113                                                  END IF;
    114                                            
    115                                                END IF;
    116                                                
    117                                              END PROCESS R1;
    118                                            
    119                                            END ARCHITECTURE comb;
    120                                            

Branch Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Branches                    10        10         0     100.0

================================Branch Details================================

Branch Coverage for file draw_octant.vhd --

------------------------------------IF Branch------------------------------------
    70                                 2097764     Count coming in to IF
    70            1                      60049         IF x1 = xnew and y1 = ynew and init = '0' and draw = '0' THEN
                                       2037715     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    80                                68250641     Count coming in to IF
    80            1                   34199725         IF disable = '0' THEN
                                      34050916     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    81                                34199725     Count coming in to IF
    81            1                      60049           IF init = '1' THEN
    90            1                      60049           ELSIF draw = '1' THEN
    96            1                   32282096           ELSIF done1 = '1' THEN
    99            1                    1797531     	  ELSE    -- draw new pixel
Branch totals: 4 hits of 4 branches = 100.0%

------------------------------------IF Branch------------------------------------
    101                                1797531     Count coming in to IF
    101           1                     769989             IF err1 > err2 OR (err1 = err2 AND xbias = '0') THEN --check new pixel direction
    106           1                    1027542             ELSE
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Condition Terms          7         6         1      85.7

================================Condition Details================================

Condition Coverage for file draw_octant.vhd --

----------------Focused Condition View-------------------
Line       70 Item    1     IF x1 = xnew and y1 = ynew and init = '0' and draw = '0' THEN
Condition totals: 3 of 4 input terms covered = 75.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
   (x1 = xnew)         Y
   (y1 = ynew)         N  '_0' not hit             Hit '_0'
  (init = '0')         Y
  (draw = '0')         Y

     Rows:       Hits  FEC Target            Matching input patterns       
 ---------  ---------  --------------------  -------------------------     
  Row   1:    1857569  (x1 = xnew)_0         { 0--- }                      
  Row   2:      60049  (x1 = xnew)_1         { 1111 }                      
  Row   3:    ***0***  (y1 = ynew)_0         { 10-- }                      
  Row   4:      60049  (y1 = ynew)_1         { 1111 }                      
  Row   5:     120097  (init = '0')_0        { 110- }                      
  Row   6:      60049  (init = '0')_1        { 1111 }                      
  Row   7:      60049  (draw = '0')_0        { 1110 }                      
  Row   8:      60049  (draw = '0')_1        { 1111 }                      

NOTE:
  * Order of matching input pattern values: {(x1 = xnew),(y1 = ynew),(init = '0'),(draw = '0')}

----------------Focused Condition View-------------------
Line       101 Item    1         IF err1 > err2 OR (err1 = err2 AND xbias = '0') THEN --check new pixel direction
Condition totals: 3 of 3 input terms covered = 100.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (err1 > err2)         Y
  (err1 = err2)         Y
  (xbias = '0')         Y

     Rows:       Hits  FEC Target            Matching input patterns       
 ---------  ---------  --------------------  -------------------------     
  Row   1:    1027542  (err1 > err2)_0       { 00- 010 }                   
  Row   2:     745558  (err1 > err2)_1       { 1-- }                       
  Row   3:    1002706  (err1 = err2)_0       { 00- }                       
  Row   4:      24431  (err1 = err2)_1       { 011 }                       
  Row   5:      24836  (xbias = '0')_0       { 010 }                       
  Row   6:      24431  (xbias = '0')_1       { 011 }                       

NOTE:
  * Order of matching input pattern values: {(err1 > err2),(err1 = err2),(xbias = '0')}


Expression Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Expression Terms         0         0         0     100.0
FSM Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    States                       0         0         0     100.0
    Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Toggle Bins                162       162         0     100.0

================================Toggle Details================================

Toggle Coverage for File draw_octant.vhd --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
         14                                 yin(5)           1           1                              100.00 
         14                                 yin(4)           1           1                              100.00 
         14                                 yin(3)           1           1                              100.00 
         14                                 yin(2)           1           1                              100.00 
         14                                 yin(1)           1           1                              100.00 
         14                                 yin(0)           1           1                              100.00 
         14                                 xin(5)           1           1                              100.00 
         14                                 xin(4)           1           1                              100.00 
         14                                 xin(3)           1           1                              100.00 
         14                                 xin(2)           1           1                              100.00 
         14                                 xin(1)           1           1                              100.00 
         14                                 xin(0)           1           1                              100.00 
         16                                   y(5)           1           1                              100.00 
         16                                   y(4)           1           1                              100.00 
         16                                   y(3)           1           1                              100.00 
         16                                   y(2)           1           1                              100.00 
         16                                   y(1)           1           1                              100.00 
         16                                   y(0)           1           1                              100.00 
         16                                   x(5)           1           1                              100.00 
         16                                   x(4)           1           1                              100.00 
         16                                   x(3)           1           1                              100.00 
         16                                   x(2)           1           1                              100.00 
         16                                   x(1)           1           1                              100.00 
         16                                   x(0)           1           1                              100.00 
         22                                  done1           1           1                              100.00 
         23                                  y1(5)           1           1                              100.00 
         23                                  y1(4)           1           1                              100.00 
         23                                  y1(3)           1           1                              100.00 
         23                                  y1(2)           1           1                              100.00 
         23                                  y1(1)           1           1                              100.00 
         23                                  y1(0)           1           1                              100.00 
         23                                  x1(5)           1           1                              100.00 
         23                                  x1(4)           1           1                              100.00 
         23                                  x1(3)           1           1                              100.00 
         23                                  x1(2)           1           1                              100.00 
         23                                  x1(1)           1           1                              100.00 
         23                                  x1(0)           1           1                              100.00 
         24                                ynew(5)           1           1                              100.00 
         24                                ynew(4)           1           1                              100.00 
         24                                ynew(3)           1           1                              100.00 
         24                                ynew(2)           1           1                              100.00 
         24                                ynew(1)           1           1                              100.00 
         24                                ynew(0)           1           1                              100.00 
         24                               yincr(5)           1           1                              100.00 
         24                               yincr(4)           1           1                              100.00 
         24                               yincr(3)           1           1                              100.00 
         24                               yincr(2)           1           1                              100.00 
         24                               yincr(1)           1           1                              100.00 
         24                               yincr(0)           1           1                              100.00 
         24                                xnew(5)           1           1                              100.00 
         24                                xnew(4)           1           1                              100.00 
         24                                xnew(3)           1           1                              100.00 
         24                                xnew(2)           1           1                              100.00 
         24                                xnew(1)           1           1                              100.00 
         24                                xnew(0)           1           1                              100.00 
         24                               xincr(5)           1           1                              100.00 
         24                               xincr(4)           1           1                              100.00 
         24                               xincr(3)           1           1                              100.00 
         24                               xincr(2)           1           1                              100.00 
         24                               xincr(1)           1           1                              100.00 
         24                               xincr(0)           1           1                              100.00 
         28                               error(5)           1           1                              100.00 
         28                               error(4)           1           1                              100.00 
         28                               error(3)           1           1                              100.00 
         28                               error(2)           1           1                              100.00 
         28                               error(1)           1           1                              100.00 
         28                               error(0)           1           1                              100.00 
         29                                err2(6)           1           1                              100.00 
         29                                err2(5)           1           1                              100.00 
         29                                err2(4)           1           1                              100.00 
         29                                err2(3)           1           1                              100.00 
         29                                err2(2)           1           1                              100.00 
         29                                err2(1)           1           1                              100.00 
         29                                err2(0)           1           1                              100.00 
         29                                err1(6)           1           1                              100.00 
         29                                err1(5)           1           1                              100.00 
         29                                err1(4)           1           1                              100.00 
         29                                err1(3)           1           1                              100.00 
         29                                err1(2)           1           1                              100.00 
         29                                err1(1)           1           1                              100.00 
         29                                err1(0)           1           1                              100.00 

Total Node Count     =         81 
Toggled Node Count   =         81 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (162 of 162 bins)

File: hdb.vhd
Statement Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Stmts                      166       153        13      92.1

================================Statement Details================================

Statement Coverage for file hdb.vhd --

    1                                              library ieee;
    2                                              use ieee.std_logic_1164.all;
    3                                              use ieee.numeric_std.all;
    4                                              use work.project_pack.all;
    5                                              use work.all;
    6                                              
    7                                              entity db is
    8                                              	GENERIC(vsize : INTEGER := 6);
    9                                              	port(
    10                                             		clk          : in  std_logic;
    11                                             		instruction  : in  std_logic_vector(15 downto 0);
    12                                             		dav          : in  std_logic;
    13                                             		delaycmd     : in  std_logic;
    14                                             		reset        : in  std_logic;
    15                                             		hdb_bus      : out db_2_rcb;
    16                                             		hdb_busy_out : out std_logic;
    17                                             		db_finish    : out std_logic
    18                                             	);
    19                                             end entity db;
    20                                             
    21                                             architecture main of db is
    22                                             	alias slv is std_logic_vector;
    23                                             
    24                                             	--wire 
    25                                             	signal x_new    : slv(5 DOWNTO 0);
    26                                             	signal y_new    : slv(5 DOWNTO 0);
    27                                             	signal x_old    : slv(5 DOWNTO 0);
    28                                             	signal y_old    : slv(5 DOWNTO 0);
    29                                             	signal FSM_en   : std_logic;
    30                                             	signal x_out    : std_logic_vector(5 DOWNTO 0);
    31                                             	signal y_out    : std_logic_vector(5 DOWNTO 0);
    32                                             	signal rcbcmd   : std_logic_vector(2 downto 0);
    33                                             	signal startcmd : std_logic;
    34                                             	signal x_clear  : slv(5 DOWNTO 0);
    35                                             	signal y_clear  : slv(5 DOWNTO 0);
    36                                             
    37                                             	--draw_any_octant signal
    38                                             	signal swap       : std_logic;
    39                                             	signal xbias      : std_logic;
    40                                             	signal negx       : std_logic;
    41                                             	signal negy       : std_logic;
    42                                             	signal disable    : std_logic;
    43                                             	signal diff_x     : slv(6 downto 0);
    44                                             	signal diff_y     : slv(6 downto 0);
    45                                             	signal x_in_draw  : slv(5 DOWNTO 0);
    46                                             	signal y_in_draw  : slv(5 DOWNTO 0);
    47                                             	signal x_out_draw : slv(5 DOWNTO 0);
    48                                             	signal y_out_draw : slv(5 DOWNTO 0);
    49                                             
    50                                             	--Register 
    51                                             	signal xynewReg : slv(11 downto 0);
    52                                             	signal xyoldReg : slv(11 downto 0);
    53                                             	signal penReg   : hostpen_t;
    54                                             	signal opReg    : hostop_t;
    55                                             	signal regEn    : std_logic;
    56                                             
    57                                             	--FSM IO 
    58                                             	signal hdb_busy   : std_logic;
    59                                             	signal draw_done  : std_logic;
    60                                             	signal resetx     : std_logic;
    61                                             	signal draw       : std_logic;
    62                                             	signal SelDrawMux : std_logic;
    63                                             	signal SelOutMux  : seloutmux_t;
    64                                             	signal clear_cmd  : std_logic;
    65                                             
    66                                             	--FSM state
    67                                             	--state need to be expanded to include clear screen command
    68                                             	type state_t is (IDLE, DECODE, MOVE, DRAWDOT_init, DRAWDOT_do, DRAWLINE_startpt, DRAWLINE_endpt, DRAWLINE_wait, CLEAR_mov_init, CLEAR_mov, CLEAR_wait_init, ClEAR_wait);
    69                                             	signal state   : state_t;
    70                                             	signal n_state : state_t;
    71                                             
    72                                             begin
    73                                             
    74                                             	--wire 
    75            1                     200584     	hdb_busy_out     <= hdb_busy;
    76            1                    6561133     	regEn            <= dav and (not hdb_busy) and (not delaycmd);
    77            1                      98674     	x_new            <= xynewReg(11 downto 6);
    78            1                      98660     	y_new            <= xynewReg(5 DOWNTO 0);
    79            1                      98673     	x_old            <= xyoldReg(11 downto 6);
    80            1                      98659     	y_old            <= xyoldReg(5 DOWNTO 0);
    81            1                    6360550     	FSM_en           <= dav and (not delaycmd);
    82            1                    1629691     	hdb_bus.X        <= x_out;
    83            1                    1627258     	hdb_bus.Y        <= y_out;
    84            1                     120456     	hdb_bus.rcb_cmd  <= rcbcmd;
    85            1                     280736     	hdb_bus.startcmd <= startcmd;
    86            1                     100241     	diff_x           <= slv(signed(resize(unsigned(x_new), diff_x'length)) - signed(resize(unsigned(x_old), diff_x'length)));
    87            1                     100240     	diff_y           <= slv(signed(resize(unsigned(y_new), diff_y'length)) - signed(resize(unsigned(y_old), diff_y'length)));
    88            1                    6561133     	db_finish        <= (not delaycmd) and (not dav) and (not hdb_busy);
    89                                             	--rcbcmd combinational
    90            1                     226135     	HostCmd2RcbCmd : process(penReg, opReg, clear_cmd, diff_x, diff_y)
    91                                             	begin
    92                                             		case penReg is
    93                                             			when NotUsed =>
    94            1                          2     				rcbcmd <= rcb_unused;
    95                                             
    96                                             			when White =>
    97                                             				case opReg is
    98                                             					when MovePen =>
    99            1                      13169     						rcbcmd <= rcb_unused;
    100                                            					when Drawline =>
    101           1                      35971     						rcbcmd <= rcb_draw_white;
    102                                            					when ClearScreen =>
    103                                            						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
    104           1                          9     							rcbcmd <= rcb_draw_white;
    105                                            						else
    106                                            							if clear_cmd = '0' then
    107           1                      19693     								rcbcmd <= rcb_move;
    108                                            							else
    109           1                       6704     								rcbcmd <= rcb_clear_white;
    110                                            							end if;
    111                                            						end if;
    112                                            					when Unused =>
    113           1                    ***0***     						rcbcmd <= rcb_unused;
    114                                            					when others =>
    115           1                    ***0***     						NULL;
    116                                            				end case;
    117                                            			when Black =>
    118                                            				case opReg is
    119                                            					when MovePen =>
    120           1                      12883     						rcbcmd <= rcb_unused;
    121                                            					when Drawline =>
    122           1                      35835     						rcbcmd <= rcb_draw_black;
    123                                            					when ClearScreen =>
    124                                            						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
    125           1                          7     							rcbcmd <= rcb_draw_black;
    126                                            						else
    127                                            							if clear_cmd = '0' then
    128           1                      19672     								rcbcmd <= rcb_move;
    129                                            							else
    130           1                       6704     								rcbcmd <= rcb_clear_black;
    131                                            							end if;
    132                                            						end if;
    133                                            					when Unused =>
    134           1                    ***0***     						rcbcmd <= rcb_unused;
    135                                            					when others =>
    136           1                    ***0***     						NULL;
    137                                            				end case;
    138                                            			when Invert =>
    139                                            				case opReg is
    140                                            					when MovePen =>
    141           1                      12898     						rcbcmd <= rcb_unused;
    142                                            					when Drawline =>
    143           1                      36425     						rcbcmd <= rcb_draw_invert;
    144                                            					when ClearScreen =>
    145                                            						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
    146           1                         16     							rcbcmd <= rcb_draw_invert;
    147                                            						else
    148                                            							if clear_cmd = '0' then
    149           1                      19496     								rcbcmd <= rcb_move;
    150                                            							else
    151           1                       6649     								rcbcmd <= rcb_clear_invert;
    152                                            							end if;
    153                                            						end if;
    154                                            					when Unused =>
    155           1                    ***0***     						rcbcmd <= rcb_unused;
    156                                            					when others =>
    157           1                    ***0***     						NULL;
    158                                            				end case;
    159                                            			when others =>
    160           1                          2     				NULL;
    161                                            		end case;
    162                                            	end process HostCmd2RcbCmd;
    163                                            
    164                                            	--register 
    165                                            	Reg : process
    166                                            	begin
    167                                            		wait until clk'event and clk = '1';
    168                                            		if reset = '0' then
    169           1                   68250631     			state <= n_state;
    170                                            			if regEn = '1' then
    171           1                     100291     				xynewReg <= instruction(13 downto 2);
    172           1                     100291     				xyoldReg <= xynewReg;
    173           1                     100291     				penReg   <= instruction(1 downto 0);
    174           1                     100291     				opReg    <= instruction(15 downto 14);
    175                                            			end if;
    176                                            		else
    177           1                         10     			state    <= IDLE;
    178           1                         10     			xynewReg <= (others => '0');
    179           1                         10     			xyoldReg <= (others => '0');
    180           1                         10     			penReg   <= (others => '0');
    181           1                         10     			opReg    <= (others => '0');
    182                                            		end if;
    183                                            	end process Reg;
    184                                            
    185                                            	--draw_any_octant
    186                                            	DAO : entity draw_any_octant generic map(x_new'length)
    187                                            		port map(clk, resetx, draw, xbias, disable, x_in_draw, y_in_draw, draw_done, x_out_draw, y_out_draw, swap, negx, negy);
    188                                            
    189                                            	--draw_any_octant Input Mux
    190           1                     220381     	InMuxDraw : process(SelDrawMux, x_new, y_new, x_old, y_old)
    191                                            	begin
    192                                            		if SelDrawMux = '0' then
    193           1                     160331     			x_in_draw <= x_old;
    194           1                     160331     			y_in_draw <= y_old;
    195                                            		else
    196           1                      60050     			x_in_draw <= x_new;
    197           1                      60050     			y_in_draw <= y_new;
    198                                            		end if;
    199                                            	end process InMuxDraw;
    200                                            
    201                                            	--Output Mux
    202           1                    2284787     	OutMux : process(x_new, y_new, x_old, y_old, x_out_draw, y_out_draw, x_clear, y_clear, SelOutMux)
    203                                            	begin
    204                                            		case SelOutMux is
    205                                            			when mux_hold =>
    206           1                     308513     				x_out <= x_old;
    207           1                     308513     				y_out <= y_old;
    208                                            			when mux_draw_dot =>
    209           1                      20185     				x_out <= x_new;
    210           1                      20185     				y_out <= y_new;
    211                                            			when mux_draw_line =>
    212           1                    1915974     				x_out <= x_out_draw;
    213           1                    1915974     				y_out <= y_out_draw;
    214                                            			when mux_clear =>
    215           1                      40114     				x_out <= x_clear;
    216           1                      40114     				y_out <= y_clear;
    217           1                          1     			when others => NULL;
    218                                            		end case;
    219                                            	end process OutMux;
    220                                            
    221                                            	--logic that ensure left bottom corner is sent then right top corner later
    222           1                     140397     	xyclear : process(clear_cmd, x_new, y_new, x_old, y_old)
    223                                            	begin
    224           1                     140397     		(x_clear, y_clear) <= my_minmax((x_old, x_new, y_old, y_new), clear_cmd);
    225                                            	end process xyclear;
    226                                            
    227                                            	--FSM combinational
    228           1                   10697176     	FSMcomb : process(state, delaycmd, draw_done, FSM_en, y_new, opreg, x_new, x_old, y_old)
    229                                            	begin
    230                                            		--default FSM output
    231                                            
    232           1                   10697176     		draw       <= '0';
    233           1                   10697176     		resetx     <= '0';
    234           1                   10697176     		SelOutMux  <= mux_hold;
    235           1                   10697176     		SelDrawMux <= '0';
    236           1                   10697176     		hdb_busy   <= '1';
    237           1                   10697176     		startcmd   <= '0';
    238           1                   10697176     		clear_cmd  <= '0';
    239                                            
    240                                            		case state is
    241                                            			when IDLE =>
    242           1                    2464815     				hdb_busy <= '0';
    243                                            				if FSM_en = '1' then
    244           1                     100291     					n_state <= DECODE;
    245                                            				else
    246           1                    2364524     					n_state <= IDLE;
    247                                            				end if;
    248                                            
    249                                            			when DECODE =>
    250                                            				case opReg is
    251                                            					when MovePen =>
    252           1                      60420     						n_state <= MOVE;
    253                                            					when DrawLine =>
    254                                            						if (unsigned(x_new) = unsigned(x_old)) and (unsigned(y_new) = unsigned(y_old)) then
    255           1                         64     							n_state <= DRAWDOT_init;
    256                                            						else
    257           1                     180139     							n_state <= DRAWLINE_startpt;
    258                                            						end if;
    259                                            					when ClearScreen =>
    260                                            						if (unsigned(x_new) = unsigned(x_old)) and (unsigned(y_new) = unsigned(y_old)) then
    261           1                         63     							n_state <= DRAWDOT_init;
    262                                            						else
    263           1                      60186     							n_state <= CLEAR_mov_init;
    264                                            						end if;
    265           1                    ***0***     					when Unused => n_state <= idle;
    266           1                    ***0***     					when Others => NULL;
    267                                            				end case;
    268                                            
    269                                            			when MOVE =>
    270           1                      20140     				SelOutMux <= mux_draw_dot;
    271           1                      20140     				startcmd  <= '0';
    272           1                      20140     				n_state   <= IDLE;
    273                                            
    274                                            			when DRAWDOT_init =>
    275           1                         45     				SelOutMux <= mux_draw_dot;
    276           1                         45     				startcmd  <= '1';
    277                                            				if delaycmd = '0' then
    278           1                         45     					n_state <= DRAWDOT_do;
    279                                            				else
    280           1                    ***0***     					n_state <= DRAWDOT_init;
    281                                            				end if;
    282                                            
    283                                            			when DRAWDOT_do =>
    284           1                        225     				SelOutMux <= mux_draw_dot;
    285                                            
    286                                            				if delaycmd = '0' then
    287           1                        135     					n_state  <= IDLE;
    288           1                        135     					startcmd <= '0';
    289                                            				else
    290           1                         90     					n_state  <= DRAWDOT_do;
    291           1                         90     					startcmd <= '1';
    292                                            				end if;
    293                                            
    294                                            			when DRAWLINE_startpt =>
    295           1                     120097     				resetx    <= '1';
    296           1                     120097     				SelOutMux <= mux_draw_line;
    297           1                     120097     				startcmd  <= '0';
    298                                            				if delaycmd = '0' then
    299           1                     120097     					n_state <= DRAWLINE_endpt;
    300                                            				else
    301           1                    ***0***     					n_state <= DRAWLINE_startpt;
    302                                            				end if;
    303                                            
    304                                            			when DRAWLINE_endpt =>
    305           1                      60049     				draw       <= '1';
    306           1                      60049     				SelOutMux  <= mux_draw_line;
    307           1                      60049     				SelDrawMux <= '1';
    308           1                      60049     				startcmd   <= '1';
    309                                            				if delaycmd = '0' then
    310           1                      60049     					n_state <= DRAWLINE_wait;
    311                                            				else
    312           1                    ***0***     					n_state <= DRAWLINE_endpt;
    313                                            				end if;
    314                                            
    315                                            			when DRAWLINE_wait =>
    316           1                    7490249     				SelOutMux <= mux_draw_line;
    317                                            
    318           1                    7490249     				n_state <= IDLE;
    319                                            				if (delaycmd = '1') or (draw_done = '0') then
    320           1                    7370152     					n_state  <= DRAWLINE_wait;
    321           1                    7370152     					startcmd <= '1';
    322                                            				end if;
    323                                            
    324                                            			when CLEAR_mov_init =>
    325           1                      20057     				SelOutMux <= mux_clear;
    326           1                      20057     				clear_cmd <= '0';
    327           1                      20057     				startcmd  <= '1';
    328                                            				if delaycmd = '0' then
    329           1                      20057     					n_state <= CLEAR_mov;
    330                                            				else
    331           1                    ***0***     					n_state <= CLEAR_mov_init;
    332                                            				end if;
    333                                            
    334                                            			when CLEAR_mov =>
    335           1                     100285     				SelOutMux <= mux_clear;
    336           1                     100285     				clear_cmd <= '0';
    337                                            				if delaycmd = '0' then
    338           1                      60171     					n_state  <= CLEAR_wait_init;
    339           1                      60171     					startcmd <= '0';
    340                                            				else
    341           1                      40114     					n_state  <= CLEAR_mov;
    342           1                      40114     					startcmd <= '1';
    343                                            				end if;
    344                                            
    345                                            			when CLEAR_wait_init =>
    346           1                      20057     				SelOutMux <= mux_clear;
    347           1                      20057     				startcmd  <= '1';
    348           1                      20057     				clear_cmd <= '1';
    349                                            				if delaycmd = '0' then
    350           1                      20057     					n_state <= ClEAR_wait;
    351                                            				else
    352           1                    ***0***     					n_state <= CLEAR_wait_init;
    353                                            				end if;
    354                                            
    355                                            			when CLEAR_wait =>
    356           1                     100285     				SelOutMux <= mux_clear;
    357           1                     100285     				clear_cmd <= '1';
    358                                            				if delaycmd = '0' then
    359           1                      60171     					startcmd <= '0';
    360           1                      60171     					n_state  <= IDLE;
    361                                            				else
    362           1                      40114     					startcmd <= '1';
    363           1                      40114     					n_state  <= CLEAR_wait;
    364                                            				end if;
    365                                            
    366                                            		end case;
    367                                            	end process FSMcomb;
    368                                            
    369                                            	--Octant_CMB
    370           1                     100269     	octantcomb : process(diff_x, diff_y)
    371                                            	begin
    372                                            		--  negx  negy  swapxy xbias octant
    373                                            		--   0      0    0      1      ENE
    374                                            		--   0      0    1      1      NNE
    375                                            		--   1      0    1      0      NNW
    376                                            		--   1      0    0      0      WNW
    377                                            		--   1      1    0      1      WSW
    378                                            		--   1      1    1      1      SSW
    379                                            		--   0      1    1      0      SSE
    380                                            		--   0      1    0      0      ESE
    381                                            
    382                                            		-- swapxy: x & y swap round on inputs & outputs
    383                                            		-- negx:   invert bits of x on inputs & outputs
    384                                            		-- negy:   invert bits of y on inputs & outputs
    385                                            
    386                                            		-- xbias always give bias in x axis direction, so swapxy must invert xbias
    387                                            		if to_integer(signed(diff_x)) < 0 then
    388                                            			--dx<0
    389                                            			if to_integer(signed(diff_y)) < 0 then
    390                                            				--dy<0
    391                                            				if abs (signed(diff_y)) > abs (signed(diff_x)) then
    392                                            					--SSW
    393           1                      11943     					negx  <= '1';
    394           1                      11943     					negy  <= '1';
    395           1                      11943     					swap  <= '1';
    396           1                      11943     					xbias <= '1';
    397                                            				else
    398                                            					--WSW
    399           1                      12407     					negx  <= '1';
    400           1                      12407     					negy  <= '1';
    401           1                      12407     					swap  <= '0';
    402           1                      12407     					xbias <= '1';
    403                                            				end if;
    404                                            			else
    405                                            				--dy>0
    406                                            				if abs (signed(diff_y)) > abs (signed(diff_x)) then
    407                                            					--NNW
    408           1                      11914     					negx  <= '1';
    409           1                      11914     					negy  <= '0';
    410           1                      11914     					swap  <= '1';
    411           1                      11914     					xbias <= '0';
    412                                            				else
    413                                            					--WNW
    414           1                      13067     					negx  <= '1';
    415           1                      13067     					negy  <= '0';
    416           1                      13067     					swap  <= '0';
    417           1                      13067     					xbias <= '0';
    418                                            				end if;
    419                                            			end if;
    420                                            		else
    421                                            			--dx>0
    422                                            			if to_integer(signed(diff_y)) < 0 then
    423                                            				--dy<0
    424                                            				if abs (signed(diff_y)) > abs (signed(diff_x)) then
    425                                            					--SSE
    426           1                      12506     					negx  <= '0';
    427           1                      12506     					negy  <= '1';
    428           1                      12506     					swap  <= '1';
    429           1                      12506     					xbias <= '0';
    430                                            				else
    431                                            					--ESE
    432           1                      12526     					negx  <= '0';
    433           1                      12526     					negy  <= '1';
    434           1                      12526     					swap  <= '0';
    435           1                      12526     					xbias <= '0';
    436                                            				end if;
    437                                            			else
    438                                            				--dy>0
    439                                            				if abs (signed(diff_y)) > abs (signed(diff_x)) then
    440                                            					--NNE
    441           1                      12680     					negx  <= '0';
    442           1                      12680     					negy  <= '0';
    443           1                      12680     					swap  <= '1';
    444           1                      12680     					xbias <= '1';
    445                                            				else
    446                                            					--ENE
    447           1                      13226     					negx  <= '0';
    448           1                      13226     					negy  <= '0';
    449           1                      13226     					swap  <= '0';
    450           1                      13226     					xbias <= '1';
    451                                            				end if;
    452                                            			end if;
    453                                            		end if;
    454                                            	end process octantcomb;
    455                                            
    456           1                    6159968     	disable <= delaycmd;
    457                                            
    458                                            end architecture main;

Branch Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Branches                    98        85        13      86.7

================================Branch Details================================

Branch Coverage for file hdb.vhd --

------------------------------------CASE Branch------------------------------------
    92                                  226135     Count coming in to CASE
    93            1                          2     			when NotUsed =>
    96            1                      75546     			when White =>
    117           1                      75101     			when Black =>
    138           1                      75484     			when Invert =>
    159           1                          2     			when others =>
Branch totals: 5 hits of 5 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    97                                   75546     Count coming in to CASE
    98            1                      13169     					when MovePen =>
    100           1                      35971     					when Drawline =>
    102           1                      26406     					when ClearScreen =>
    112           1                    ***0***     					when Unused =>
    114           1                    ***0***     					when others =>
Branch totals: 3 hits of 5 branches = 60.0%

------------------------------------IF Branch------------------------------------
    103                                  26406     Count coming in to IF
    103           1                          9     						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
    105           1                      26397     						else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    106                                  26397     Count coming in to IF
    106           1                      19693     							if clear_cmd = '0' then
    108           1                       6704     							else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    118                                  75101     Count coming in to CASE
    119           1                      12883     					when MovePen =>
    121           1                      35835     					when Drawline =>
    123           1                      26383     					when ClearScreen =>
    133           1                    ***0***     					when Unused =>
    135           1                    ***0***     					when others =>
Branch totals: 3 hits of 5 branches = 60.0%

------------------------------------IF Branch------------------------------------
    124                                  26383     Count coming in to IF
    124           1                          7     						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
    126           1                      26376     						else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    127                                  26376     Count coming in to IF
    127           1                      19672     							if clear_cmd = '0' then
    129           1                       6704     							else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    139                                  75484     Count coming in to CASE
    140           1                      12898     					when MovePen =>
    142           1                      36425     					when Drawline =>
    144           1                      26161     					when ClearScreen =>
    154           1                    ***0***     					when Unused =>
    156           1                    ***0***     					when others =>
Branch totals: 3 hits of 5 branches = 60.0%

------------------------------------IF Branch------------------------------------
    145                                  26161     Count coming in to IF
    145           1                         16     						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
    147           1                      26145     						else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    148                                  26145     Count coming in to IF
    148           1                      19496     							if clear_cmd = '0' then
    150           1                       6649     							else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    168                               68250641     Count coming in to IF
    168           1                   68250631     		if reset = '0' then
    176           1                         10     		else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    170                               68250631     Count coming in to IF
    170           1                     100291     			if regEn = '1' then
                                      68150340     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    192                                 220381     Count coming in to IF
    192           1                     160331     		if SelDrawMux = '0' then
    195           1                      60050     		else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    204                                2284787     Count coming in to CASE
    205           1                     308513     			when mux_hold =>
    208           1                      20185     			when mux_draw_dot =>
    211           1                    1915974     			when mux_draw_line =>
    214           1                      40114     			when mux_clear =>
    217           1                          1     			when others => NULL;
Branch totals: 5 hits of 5 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    240                               10697176     Count coming in to CASE
    241           1                    2464815     			when IDLE =>
    249           1                     300872     			when DECODE =>
    269           1                      20140     			when MOVE =>
    274           1                         45     			when DRAWDOT_init =>
    283           1                        225     			when DRAWDOT_do =>
    294           1                     120097     			when DRAWLINE_startpt =>
    304           1                      60049     			when DRAWLINE_endpt =>
    315           1                    7490249     			when DRAWLINE_wait =>
    324           1                      20057     			when CLEAR_mov_init =>
    334           1                     100285     			when CLEAR_mov =>
    345           1                      20057     			when CLEAR_wait_init =>
    355           1                     100285     			when CLEAR_wait =>
Branch totals: 12 hits of 12 branches = 100.0%

------------------------------------IF Branch------------------------------------
    243                                2464815     Count coming in to IF
    243           1                     100291     				if FSM_en = '1' then
    245           1                    2364524     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    250                                 300872     Count coming in to CASE
    251           1                      60420     					when MovePen =>
    253           1                     180203     					when DrawLine =>
    259           1                      60249     					when ClearScreen =>
    265           1                    ***0***     					when Unused => n_state <= idle;
    266           1                    ***0***     					when Others => NULL;
Branch totals: 3 hits of 5 branches = 60.0%

------------------------------------IF Branch------------------------------------
    254                                 180203     Count coming in to IF
    254           1                         64     						if (unsigned(x_new) = unsigned(x_old)) and (unsigned(y_new) = unsigned(y_old)) then
    256           1                     180139     						else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    260                                  60249     Count coming in to IF
    260           1                         63     						if (unsigned(x_new) = unsigned(x_old)) and (unsigned(y_new) = unsigned(y_old)) then
    262           1                      60186     						else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    277                                     45     Count coming in to IF
    277           1                         45     				if delaycmd = '0' then
    279           1                    ***0***     				else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    286                                    225     Count coming in to IF
    286           1                        135     				if delaycmd = '0' then
    289           1                         90     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    298                                 120097     Count coming in to IF
    298           1                     120097     				if delaycmd = '0' then
    300           1                    ***0***     				else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    309                                  60049     Count coming in to IF
    309           1                      60049     				if delaycmd = '0' then
    311           1                    ***0***     				else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    319                                7490249     Count coming in to IF
    319           1                    7370152     				if (delaycmd = '1') or (draw_done = '0') then
                                        120097     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    328                                  20057     Count coming in to IF
    328           1                      20057     				if delaycmd = '0' then
    330           1                    ***0***     				else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    337                                 100285     Count coming in to IF
    337           1                      60171     				if delaycmd = '0' then
    340           1                      40114     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    349                                  20057     Count coming in to IF
    349           1                      20057     				if delaycmd = '0' then
    351           1                    ***0***     				else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    358                                 100285     Count coming in to IF
    358           1                      60171     				if delaycmd = '0' then
    361           1                      40114     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    387                                 100269     Count coming in to IF
    387           1                      49331     		if to_integer(signed(diff_x)) < 0 then
    420           1                      50938     		else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    389                                  49331     Count coming in to IF
    389           1                      24350     			if to_integer(signed(diff_y)) < 0 then
    404           1                      24981     			else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    391                                  24350     Count coming in to IF
    391           1                      11943     				if abs (signed(diff_y)) > abs (signed(diff_x)) then
    397           1                      12407     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    406                                  24981     Count coming in to IF
    406           1                      11914     				if abs (signed(diff_y)) > abs (signed(diff_x)) then
    412           1                      13067     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    422                                  50938     Count coming in to IF
    422           1                      25032     			if to_integer(signed(diff_y)) < 0 then
    437           1                      25906     			else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    424                                  25032     Count coming in to IF
    424           1                      12506     				if abs (signed(diff_y)) > abs (signed(diff_x)) then
    430           1                      12526     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    439                                  25906     Count coming in to IF
    439           1                      12680     				if abs (signed(diff_y)) > abs (signed(diff_x)) then
    445           1                      13226     				else
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Condition Terms         12        12         0     100.0

================================Condition Details================================

Condition Coverage for file hdb.vhd --

----------------Focused Condition View-------------------
Line       103 Item    1 						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
Condition totals: 2 of 2 input terms covered = 100.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  ((<type>)diff_x = 0)         Y
  ((<type>)diff_y = 0)         Y

     Rows:       Hits  FEC Target              Matching input patterns       
 ---------  ---------  --------------------    -------------------------     
  Row   1:      25998  ((<type>)diff_x = 0)_0  { 0- }                        
  Row   2:          9  ((<type>)diff_x = 0)_1  { 11 }                        
  Row   3:        399  ((<type>)diff_y = 0)_0  { 10 }                        
  Row   4:          9  ((<type>)diff_y = 0)_1  { 11 }                        

NOTE:
  * Order of matching input pattern values: {((<type>)diff_x = 0),((<type>)diff_y = 0)}

----------------Focused Condition View-------------------
Line       124 Item    1 						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
Condition totals: 2 of 2 input terms covered = 100.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  ((<type>)diff_x = 0)         Y
  ((<type>)diff_y = 0)         Y

     Rows:       Hits  FEC Target              Matching input patterns       
 ---------  ---------  --------------------    -------------------------     
  Row   1:      25968  ((<type>)diff_x = 0)_0  { 0- }                        
  Row   2:          7  ((<type>)diff_x = 0)_1  { 11 }                        
  Row   3:        408  ((<type>)diff_y = 0)_0  { 10 }                        
  Row   4:          7  ((<type>)diff_y = 0)_1  { 11 }                        

NOTE:
  * Order of matching input pattern values: {((<type>)diff_x = 0),((<type>)diff_y = 0)}

----------------Focused Condition View-------------------
Line       145 Item    1 						if unsigned(diff_x) = 0 and unsigned(diff_y) = 0 then
Condition totals: 2 of 2 input terms covered = 100.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  ((<type>)diff_x = 0)         Y
  ((<type>)diff_y = 0)         Y

     Rows:       Hits  FEC Target              Matching input patterns       
 ---------  ---------  --------------------    -------------------------     
  Row   1:      25716  ((<type>)diff_x = 0)_0  { 0- }                        
  Row   2:         16  ((<type>)diff_x = 0)_1  { 11 }                        
  Row   3:        429  ((<type>)diff_y = 0)_0  { 10 }                        
  Row   4:         16  ((<type>)diff_y = 0)_1  { 11 }                        

NOTE:
  * Order of matching input pattern values: {((<type>)diff_x = 0),((<type>)diff_y = 0)}

----------------Focused Condition View-------------------
Line       254 Item    1 						if (unsigned(x_new) = unsigned(x_old)) and (unsigned(y_new) = unsigned(y_old)) then
Condition totals: 2 of 2 input terms covered = 100.0%

                       Input Term   Covered  Reason for no coverage   Hint
                      -----------  --------  -----------------------  --------------
  ((<type>)x_new = (<type>)x_old)         Y
  ((<type>)y_new = (<type>)y_old)         Y

     Rows:       Hits  FEC Target                         Matching input patterns       
 ---------  ---------  --------------------               -------------------------     
  Row   1:     177336  ((<type>)x_new = (<type>)x_old)_0  { 0- }                        
  Row   2:         64  ((<type>)x_new = (<type>)x_old)_1  { 11 }                        
  Row   3:       2803  ((<type>)y_new = (<type>)y_old)_0  { 10 }                        
  Row   4:         64  ((<type>)y_new = (<type>)y_old)_1  { 11 }                        

NOTE:
  * Order of matching input pattern values: {((<type>)x_new = (<type>)x_old),((<type>)y_new = (<type>)y_old)}

----------------Focused Condition View-------------------
Line       260 Item    1 						if (unsigned(x_new) = unsigned(x_old)) and (unsigned(y_new) = unsigned(y_old)) then
Condition totals: 2 of 2 input terms covered = 100.0%

                       Input Term   Covered  Reason for no coverage   Hint
                      -----------  --------  -----------------------  --------------
  ((<type>)x_new = (<type>)x_old)         Y
  ((<type>)y_new = (<type>)y_old)         Y

     Rows:       Hits  FEC Target                         Matching input patterns       
 ---------  ---------  --------------------               -------------------------     
  Row   1:      59241  ((<type>)x_new = (<type>)x_old)_0  { 0- }                        
  Row   2:         63  ((<type>)x_new = (<type>)x_old)_1  { 11 }                        
  Row   3:        945  ((<type>)y_new = (<type>)y_old)_0  { 10 }                        
  Row   4:         63  ((<type>)y_new = (<type>)y_old)_1  { 11 }                        

NOTE:
  * Order of matching input pattern values: {((<type>)x_new = (<type>)x_old),((<type>)y_new = (<type>)y_old)}

----------------Focused Condition View-------------------
Line       319 Item    1 				if (delaycmd = '1') or (draw_done = '0') then
Condition totals: 2 of 2 input terms covered = 100.0%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
   (delaycmd = '1')         Y
  (draw_done = '0')         Y

     Rows:       Hits  FEC Target            Matching input patterns       
 ---------  ---------  --------------------  -------------------------     
  Row   1:     120097  (delaycmd = '1')_0    { 00 }                        
  Row   2:    3715100  (delaycmd = '1')_1    { 1- }                        
  Row   3:     120097  (draw_done = '0')_0   { 00 }                        
  Row   4:    3655052  (draw_done = '0')_1   { 01 }                        

NOTE:
  * Order of matching input pattern values: {(delaycmd = '1'),(draw_done = '0')}


Expression Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Expression Terms         8         7         1      87.5

================================Expression Details================================

Expression Coverage for file hdb.vhd --

----------------Focused Expression View-----------------
Line       76 Item    1 	regEn            <= dav and (not hdb_busy) and (not delaycmd);
Expression totals: 2 of 3 input terms covered = 66.6%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
         dav         Y
    hdb_busy         Y
    delaycmd         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Matching input patterns       
 ---------  ---------  --------------------  -------------------------     
  Row   1:    1282551  dav_0                 { 000 }                       
  Row   2:     100291  dav_1                 { 100 }                       
  Row   3:     100291  hdb_busy_0            { 100 }                       
  Row   4:    1997984  hdb_busy_1            { 110 }                       
  Row   5:     100291  delaycmd_0            { 100 }                       
  Row   6:    ***0***  delaycmd_1            { 101 }                       

NOTE:
  * Order of matching input pattern values: {dav,hdb_busy,delaycmd}

----------------Focused Expression View-----------------
Line       81 Item    1 	FSM_en           <= dav and (not delaycmd);
Expression totals: 2 of 2 input terms covered = 100.0%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
         dav         Y
    delaycmd         Y

     Rows:       Hits  FEC Target            Matching input patterns       
 ---------  ---------  --------------------  -------------------------     
  Row   1:    1282580  dav_0                 { 00 }                        
  Row   2:    1997985  dav_1                 { 10 }                        
  Row   3:    1997985  delaycmd_0            { 10 }                        
  Row   4:    1897694  delaycmd_1            { 11 }                        

NOTE:
  * Order of matching input pattern values: {dav,delaycmd}

----------------Focused Expression View-----------------
Line       88 Item    1 	db_finish        <= (not delaycmd) and (not dav) and (not hdb_busy);
Expression totals: 3 of 3 input terms covered = 100.0%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    delaycmd         Y
         dav         Y
    hdb_busy         Y

     Rows:       Hits  FEC Target            Matching input patterns       
 ---------  ---------  --------------------  -------------------------     
  Row   1:    1282551  delaycmd_0            { 000 }                       
  Row   2:    1182259  delaycmd_1            { 100 }                       
  Row   3:    1282551  dav_0                 { 000 }                       
  Row   4:     100291  dav_1                 { 010 }                       
  Row   5:    1282551  hdb_busy_0            { 000 }                       
  Row   6:     100321  hdb_busy_1            { 001 }                       

NOTE:
  * Order of matching input pattern values: {delaycmd,dav,hdb_busy}


FSM Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    States                      12        12         0     100.0
    Transitions                 32        20        12      62.5

================================FSM Details================================

FSM Coverage for file hdb.vhd --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 241                IDLE                   0
 249              DECODE                   1
 324      CLEAR_mov_init                   8
 274        DRAWDOT_init                   3
 294    DRAWLINE_startpt                   5
 269                MOVE                   2
 283          DRAWDOT_do                   4
 304      DRAWLINE_endpt                   6
 315       DRAWLINE_wait                   7
 334           CLEAR_mov                   9
 345     CLEAR_wait_init                  10
 355          ClEAR_wait                  11
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE            36750349
                  DECODE              100291
          CLEAR_mov_init               20057
            DRAWDOT_init                  45
        DRAWLINE_startpt               60049
                    MOVE               20140
              DRAWDOT_do                 145
          DRAWLINE_endpt               60049
           DRAWLINE_wait             6775915
               CLEAR_mov              122719
         CLEAR_wait_init               20057
              ClEAR_wait            24320825
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 244                   0              100291          IDLE -> DECODE      
 246                   1            36650058          IDLE -> IDLE        
 252                   2               20140          DECODE -> MOVE      
 255                   3                  45          DECODE -> DRAWDOT_init
 257                   4               60049          DECODE -> DRAWLINE_startpt
 263                   5               20057          DECODE -> CLEAR_mov_init
 329                   7               20057          CLEAR_mov_init -> CLEAR_mov
 278                  10                  45          DRAWDOT_init -> DRAWDOT_do
 299                  13               60049          DRAWLINE_startpt -> DRAWLINE_endpt
 272                  16               20140          MOVE -> IDLE        
 287                  17                  45          DRAWDOT_do -> IDLE  
 290                  18                 100          DRAWDOT_do -> DRAWDOT_do
 310                  19               60049          DRAWLINE_endpt -> DRAWLINE_wait
 318                  22               60049          DRAWLINE_wait -> IDLE
 320                  23             6715866          DRAWLINE_wait -> DRAWLINE_wait
 338                  24               20057          CLEAR_mov -> CLEAR_wait_init
 341                  25              102662          CLEAR_mov -> CLEAR_mov
 350                  27               20057          CLEAR_wait_init -> ClEAR_wait
 360                  30               20057          ClEAR_wait -> IDLE  
 363                  31            24300768          ClEAR_wait -> ClEAR_wait
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 265                   6          DECODE -> IDLE      
 331                   8          CLEAR_mov_init -> CLEAR_mov_init
 177                   9          CLEAR_mov_init -> IDLE
 280                  11          DRAWDOT_init -> DRAWDOT_init
 177                  12          DRAWDOT_init -> IDLE
 301                  14          DRAWLINE_startpt -> DRAWLINE_startpt
 177                  15          DRAWLINE_startpt -> IDLE
 312                  20          DRAWLINE_endpt -> DRAWLINE_endpt
 177                  21          DRAWLINE_endpt -> IDLE
 177                  26          CLEAR_mov -> IDLE   
 352                  28          CLEAR_wait_init -> CLEAR_wait_init
 177                  29          CLEAR_wait_init -> IDLE


    Summary                 Active      Hits    Misses % Covered
    -------                 ------      ----    ------ ---------
    States                      12        12         0     100.0
    Transitions                 32        20        12      62.5
Toggle Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Toggle Bins                366       365         1      99.7

================================Toggle Details================================

Toggle Coverage for File hdb.vhd --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
         10                                    clk           1           1                              100.00 
         11                         instruction(9)           1           1                              100.00 
         11                         instruction(8)           1           1                              100.00 
         11                         instruction(7)           1           1                              100.00 
         11                         instruction(6)           1           1                              100.00 
         11                         instruction(5)           1           1                              100.00 
         11                         instruction(4)           1           1                              100.00 
         11                         instruction(3)           1           1                              100.00 
         11                         instruction(2)           1           1                              100.00 
         11                        instruction(15)           1           1                              100.00 
         11                        instruction(14)           1           1                              100.00 
         11                        instruction(13)           1           1                              100.00 
         11                        instruction(12)           1           1                              100.00 
         11                        instruction(11)           1           1                              100.00 
         11                        instruction(10)           1           1                              100.00 
         11                         instruction(1)           1           1                              100.00 
         11                         instruction(0)           1           1                              100.00 
         12                                    dav           1           1                              100.00 
         13                               delaycmd           1           1                              100.00 
         14                                  reset           1           0                               50.00 
         15                       hdb_bus.startcmd           1           1                              100.00 
         15                     hdb_bus.rcb_cmd(2)           1           1                              100.00 
         15                     hdb_bus.rcb_cmd(1)           1           1                              100.00 
         15                     hdb_bus.rcb_cmd(0)           1           1                              100.00 
         15                           hdb_bus.Y(5)           1           1                              100.00 
         15                           hdb_bus.Y(4)           1           1                              100.00 
         15                           hdb_bus.Y(3)           1           1                              100.00 
         15                           hdb_bus.Y(2)           1           1                              100.00 
         15                           hdb_bus.Y(1)           1           1                              100.00 
         15                           hdb_bus.Y(0)           1           1                              100.00 
         15                           hdb_bus.X(5)           1           1                              100.00 
         15                           hdb_bus.X(4)           1           1                              100.00 
         15                           hdb_bus.X(3)           1           1                              100.00 
         15                           hdb_bus.X(2)           1           1                              100.00 
         15                           hdb_bus.X(1)           1           1                              100.00 
         15                           hdb_bus.X(0)           1           1                              100.00 
         16                           hdb_busy_out           1           1                              100.00 
         17                              db_finish           1           1                              100.00 
         25                               x_new(5)           1           1                              100.00 
         25                               x_new(4)           1           1                              100.00 
         25                               x_new(3)           1           1                              100.00 
         25                               x_new(2)           1           1                              100.00 
         25                               x_new(1)           1           1                              100.00 
         25                               x_new(0)           1           1                              100.00 
         26                               y_new(5)           1           1                              100.00 
         26                               y_new(4)           1           1                              100.00 
         26                               y_new(3)           1           1                              100.00 
         26                               y_new(2)           1           1                              100.00 
         26                               y_new(1)           1           1                              100.00 
         26                               y_new(0)           1           1                              100.00 
         27                               x_old(5)           1           1                              100.00 
         27                               x_old(4)           1           1                              100.00 
         27                               x_old(3)           1           1                              100.00 
         27                               x_old(2)           1           1                              100.00 
         27                               x_old(1)           1           1                              100.00 
         27                               x_old(0)           1           1                              100.00 
         28                               y_old(5)           1           1                              100.00 
         28                               y_old(4)           1           1                              100.00 
         28                               y_old(3)           1           1                              100.00 
         28                               y_old(2)           1           1                              100.00 
         28                               y_old(1)           1           1                              100.00 
         28                               y_old(0)           1           1                              100.00 
         29                                 FSM_en           1           1                              100.00 
         30                               x_out(5)           1           1                              100.00 
         30                               x_out(4)           1           1                              100.00 
         30                               x_out(3)           1           1                              100.00 
         30                               x_out(2)           1           1                              100.00 
         30                               x_out(1)           1           1                              100.00 
         30                               x_out(0)           1           1                              100.00 
         31                               y_out(5)           1           1                              100.00 
         31                               y_out(4)           1           1                              100.00 
         31                               y_out(3)           1           1                              100.00 
         31                               y_out(2)           1           1                              100.00 
         31                               y_out(1)           1           1                              100.00 
         31                               y_out(0)           1           1                              100.00 
         32                              rcbcmd(2)           1           1                              100.00 
         32                              rcbcmd(1)           1           1                              100.00 
         32                              rcbcmd(0)           1           1                              100.00 
         33                               startcmd           1           1                              100.00 
         34                             x_clear(5)           1           1                              100.00 
         34                             x_clear(4)           1           1                              100.00 
         34                             x_clear(3)           1           1                              100.00 
         34                             x_clear(2)           1           1                              100.00 
         34                             x_clear(1)           1           1                              100.00 
         34                             x_clear(0)           1           1                              100.00 
         35                             y_clear(5)           1           1                              100.00 
         35                             y_clear(4)           1           1                              100.00 
         35                             y_clear(3)           1           1                              100.00 
         35                             y_clear(2)           1           1                              100.00 
         35                             y_clear(1)           1           1                              100.00 
         35                             y_clear(0)           1           1                              100.00 
         38                                   swap           1           1                              100.00 
         39                                  xbias           1           1                              100.00 
         40                                   negx           1           1                              100.00 
         41                                   negy           1           1                              100.00 
         42                                disable           1           1                              100.00 
         43                              diff_x(6)           1           1                              100.00 
         43                              diff_x(5)           1           1                              100.00 
         43                              diff_x(4)           1           1                              100.00 
         43                              diff_x(3)           1           1                              100.00 
         43                              diff_x(2)           1           1                              100.00 
         43                              diff_x(1)           1           1                              100.00 
         43                              diff_x(0)           1           1                              100.00 
         44                              diff_y(6)           1           1                              100.00 
         44                              diff_y(5)           1           1                              100.00 
         44                              diff_y(4)           1           1                              100.00 
         44                              diff_y(3)           1           1                              100.00 
         44                              diff_y(2)           1           1                              100.00 
         44                              diff_y(1)           1           1                              100.00 
         44                              diff_y(0)           1           1                              100.00 
         45                           x_in_draw(5)           1           1                              100.00 
         45                           x_in_draw(4)           1           1                              100.00 
         45                           x_in_draw(3)           1           1                              100.00 
         45                           x_in_draw(2)           1           1                              100.00 
         45                           x_in_draw(1)           1           1                              100.00 
         45                           x_in_draw(0)           1           1                              100.00 
         46                           y_in_draw(5)           1           1                              100.00 
         46                           y_in_draw(4)           1           1                              100.00 
         46                           y_in_draw(3)           1           1                              100.00 
         46                           y_in_draw(2)           1           1                              100.00 
         46                           y_in_draw(1)           1           1                              100.00 
         46                           y_in_draw(0)           1           1                              100.00 
         47                          x_out_draw(5)           1           1                              100.00 
         47                          x_out_draw(4)           1           1                              100.00 
         47                          x_out_draw(3)           1           1                              100.00 
         47                          x_out_draw(2)           1           1                              100.00 
         47                          x_out_draw(1)           1           1                              100.00 
         47                          x_out_draw(0)           1           1                              100.00 
         48                          y_out_draw(5)           1           1                              100.00 
         48                          y_out_draw(4)           1           1                              100.00 
         48                          y_out_draw(3)           1           1                              100.00 
         48                          y_out_draw(2)           1           1                              100.00 
         48                          y_out_draw(1)           1           1                              100.00 
         48                          y_out_draw(0)           1           1                              100.00 
         51                            xynewReg(9)           1           1                              100.00 
         51                            xynewReg(8)           1           1                              100.00 
         51                            xynewReg(7)           1           1                              100.00 
         51                            xynewReg(6)           1           1                              100.00 
         51                            xynewReg(5)           1           1                              100.00 
         51                            xynewReg(4)           1           1                              100.00 
         51                            xynewReg(3)           1           1                              100.00 
         51                            xynewReg(2)           1           1                              100.00 
         51                           xynewReg(11)           1           1                              100.00 
         51                           xynewReg(10)           1           1                              100.00 
         51                            xynewReg(1)           1           1                              100.00 
         51                            xynewReg(0)           1           1                              100.00 
         52                            xyoldReg(9)           1           1                              100.00 
         52                            xyoldReg(8)           1           1                              100.00 
         52                            xyoldReg(7)           1           1                              100.00 
         52                            xyoldReg(6)           1           1                              100.00 
         52                            xyoldReg(5)           1           1                              100.00 
         52                            xyoldReg(4)           1           1                              100.00 
         52                            xyoldReg(3)           1           1                              100.00 
         52                            xyoldReg(2)           1           1                              100.00 
         52                           xyoldReg(11)           1           1                              100.00 
         52                           xyoldReg(10)           1           1                              100.00 
         52                            xyoldReg(1)           1           1                              100.00 
         52                            xyoldReg(0)           1           1                              100.00 
         53                              penReg(1)           1           1                              100.00 
         53                              penReg(0)           1           1                              100.00 
         54                               opReg(1)           1           1                              100.00 
         54                               opReg(0)           1           1                              100.00 
         55                                  regEn           1           1                              100.00 
         58                               hdb_busy           1           1                              100.00 
         59                              draw_done           1           1                              100.00 
         60                                 resetx           1           1                              100.00 
         61                                   draw           1           1                              100.00 
         62                             SelDrawMux           1           1                              100.00 
         63                           SelOutMux(1)           1           1                              100.00 
         63                           SelOutMux(0)           1           1                              100.00 
         64                              clear_cmd           1           1                              100.00 
         69                                  state               ENUM type       Value       Count 
                                                                      IDLE         209      100.00 
                                                                    DECODE         210      100.00 
                                                                      MOVE         106      100.00 
                                                              DRAWDOT_init           1      100.00 
                                                                DRAWDOT_do           1      100.00 
                                                          DRAWLINE_startpt          66      100.00 
                                                            DRAWLINE_endpt          66      100.00 
                                                             DRAWLINE_wait          66      100.00 
                                                            CLEAR_mov_init          37      100.00 
                                                                 CLEAR_mov          37      100.00 
                                                           CLEAR_wait_init          37      100.00 
                                                                ClEAR_wait          37      100.00 
         70                                n_state               ENUM type       Value       Count 
                                                                      IDLE         258      100.00 
                                                                    DECODE         218      100.00 
                                                                      MOVE         110      100.00 
                                                              DRAWDOT_init           1      100.00 
                                                                DRAWDOT_do           4      100.00 
                                                          DRAWLINE_startpt          70      100.00 
                                                            DRAWLINE_endpt          66      100.00 
                                                             DRAWLINE_wait          66      100.00 
                                                            CLEAR_mov_init          37      100.00 
                                                                 CLEAR_mov          37      100.00 
                                                           CLEAR_wait_init          74      100.00 
                                                                ClEAR_wait          37      100.00 

Total Node Count     =        195 
Toggled Node Count   =        194 
Untoggled Node Count =          1 

Toggle Coverage      =       99.7% (365 of 366 bins)

File: pix_cache_pak.vhd
Statement Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Stmts                       12         0        12       0.0

================================Statement Details================================

Statement Coverage for file pix_cache_pak.vhd --

    1                                              LIBRARY IEEE;
    2                                              USE IEEE.std_logic_1164.ALL;
    3                                              
    4                                              -- This package contains types and constants for use by the pix_word_cache block
    5                                              -- pix_op_t is an array type used for the block ports, so this package must be
    6                                              -- used by any architecture instantiated pix_word_cache.
    7                                              
    8                                              -- Note that although the pixop_t array is similar to std_logic_vector(1 DOWNTO
    9                                              -- 0) the two cannot be directly assigned. In practice pixop_t will always be
    10                                             -- used via the constants defined in this package, with CASE statements to
    11                                             -- detect values or generate values as required.
    12                                             
    13                                             -- store_t is the array type based on pixop_t that stores pixel operations.
    14                                             -- Again it is used in a port of pix_word_cache, so architectures instantiating
    15                                             -- it will need to use this type.
    16                                             
    17                                             PACKAGE pix_cache_pak IS
    18                                             	TYPE pixop_t IS ARRAY (1 DOWNTO 0) OF std_logic;
    19                                             	SUBTYPE hostop_t is std_logic_vector(1 downto 0);
    20                                             	constant MovePen     : hostop_t := "00";
    21                                             	constant DrawLine    : hostop_t := "01";
    22                                             	constant ClearScreen : hostop_t := "10";
    23                                             	constant Unused      : hostop_t := "11";
    24                                             	CONSTANT psame       : pixop_t  := "00";
    25                                             	CONSTANT pblack      : pixop_t  := "10";
    26                                             	CONSTANT pwhite      : pixop_t  := "01";
    27                                             	CONSTANT pinvert     : pixop_t  := "11";
    28                                             	TYPE store_t IS ARRAY (0 TO 15) OF pixop_t;
    29                                             	function slv(input : pixop_t) return std_logic_vector;
    30                                             	function pixop(input : std_logic_vector(1 downto 0)) return pixop_t;
    31                                             END PACKAGE pix_cache_pak;
    32                                             
    33                                             package body pix_cache_pak is
    34                                             	function slv(input : pixop_t) return std_logic_vector is
    35                                             		variable result : std_logic_vector(1 downto 0);
    36                                             	begin
    37                                             		case input is
    38            1                    ***0***     			when psame   => result := "00";
    39            1                    ***0***     			when pblack  => result := "10";
    40            1                    ***0***     			when pwhite  => result := "01";
    41            1                    ***0***     			when pinvert => result := "11";
    42            1                    ***0***     			when others  => NULL;
    43                                             		end case;
    44            1                    ***0***     		return result;
    45                                             	end slv;
    46                                             
    47                                             	function pixop(input : std_logic_vector(1 downto 0)) return pixop_t is
    48                                             		variable result : pixop_t;
    49                                             	begin
    50                                             		case input is
    51            1                    ***0***     			when "00"   => result := psame;
    52            1                    ***0***     			when "10"   => result := pblack;
    53            1                    ***0***     			when "01"   => result := pwhite;
    54            1                    ***0***     			when "11"   => result := pinvert;
    55            1                    ***0***     			when others => NULL;
    56                                             		end case;
    57            1                    ***0***     		return result;
    58                                             	end pixop;
    59                                             end package body pix_cache_pak;

Branch Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Branches                    10         0        10       0.0

================================Branch Details================================

Branch Coverage for file pix_cache_pak.vhd --

------------------------------------CASE Branch------------------------------------
    37                                 ***0***     Count coming in to CASE
    38            1                    ***0***     			when psame   => result := "00";
    39            1                    ***0***     			when pblack  => result := "10";
    40            1                    ***0***     			when pwhite  => result := "01";
    41            1                    ***0***     			when pinvert => result := "11";
    42            1                    ***0***     			when others  => NULL;
Branch totals: 0 hits of 5 branches = 0.0%

------------------------------------CASE Branch------------------------------------
    50                                 ***0***     Count coming in to CASE
    51            1                    ***0***     			when "00"   => result := psame;
    52            1                    ***0***     			when "10"   => result := pblack;
    53            1                    ***0***     			when "01"   => result := pwhite;
    54            1                    ***0***     			when "11"   => result := pinvert;
    55            1                    ***0***     			when others => NULL;
Branch totals: 0 hits of 5 branches = 0.0%


Condition Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Condition Terms          0         0         0     100.0
Expression Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Expression Terms         0         0         0     100.0
FSM Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    States                       0         0         0     100.0
    Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Toggle Bins                  0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File pix_cache_pak.vhd --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

File: pix_word_cache.vhd
Statement Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Stmts                       36        31         5      86.1

================================Statement Details================================

Statement Coverage for file pix_word_cache.vhd --

    1                                              LIBRARY IEEE;
    2                                              USE IEEE.std_logic_1164.ALL;
    3                                              USE IEEE.numeric_std.ALL;
    4                                              USE WORK.pix_cache_pak.ALL;
    5                                              
    6                                              ENTITY pix_word_cache IS
    7                                              	PORT(
    8                                              		clk, reset, wen_all, pw : IN  std_logic;
    9                                              		pixopin                 : IN  pixop_t;
    10                                             		pixnum                  : IN  std_logic_vector(3 downto 0);
    11                                             		store                   : OUT store_t;
    12                                             		is_same                 : OUT std_logic
    13                                             	);
    14                                             
    15                                             END ENTITY pix_word_cache;
    16                                             
    17                                             ARCHITECTURE func OF pix_word_cache IS
    18                                             	SIGNAL rdin1, rdout1 : pixop_t;
    19                                             	SIGNAL rdout_par     : store_t;
    20                                             	SIGNAL wen_concac    : std_logic_vector(1 DOWNTO 0);
    21                                             
    22                                             	ALIAS usgn IS unsigned;
    23                                             
    24                                             	--function has return value, procedure does not
    25                                             	--procedure ~ void
    26                                             
    27                                             	PROCEDURE write_ram(SIGNAL rdout_par : OUT store_t; comp_each : std_logic; index_in : INTEGER) IS
    28                                             	BEGIN
    29            1                    4716950     		FOR i IN rdout_par'RANGE LOOP
    29            2                   75471200     
    30                                             			IF comp_each = '0' THEN     --if comp_each is 0, just write all
    31            1                   75471200     				rdout_par(i) <= psame;
    32                                             			ELSE
    33                                             				IF i /= index_in THEN
    34            1                    ***0***     					rdout_par(i) <= psame;
    35                                             				ELSE
    36            1                    ***0***     					rdout_par(i) <= rdin1;
    37                                             				END IF;
    38                                             			END IF;
    39            1                   75471200     		END LOOP;
    40                                             	END PROCEDURE write_ram;
    41                                             
    42                                             	FUNCTION check_same(rdout_par : store_t) RETURN std_logic IS
    43                                             	BEGIN
    44            1                   15464766     		FOR i IN rdout_par'RANGE LOOP
    44            2                  127517051     
    45                                             			IF rdout_par(i) /= psame THEN
    46            1                   12008178     				RETURN '0';             --if not same, then break and return
    47                                             			END IF;
    48            1                  127517051     		END LOOP;
    49                                             		--else all same
    50            1                    3456588     		RETURN '1';
    51                                             	END FUNCTION check_same;
    52                                             
    53                                             BEGIN
    54            1                   40100453     	CHANGE : PROCESS(pw, wen_all, rdout1, pixopin)
    55                                             	BEGIN
    56                                             		--rdout1 -> opram
    57                                             		--opout -> rdin1
    58                                             		IF wen_all = '0' THEN
    59                                             			CASE rdout1 IS
    60                                             				WHEN psame =>
    61            1                   19279214     					rdin1 <= pixopin;
    62                                             				WHEN pblack =>
    63                                             					CASE pixopin(0) IS
    64                                             						WHEN '0' =>
    65            1                    5430307     							rdin1 <= pblack;
    66                                             						WHEN '1' =>
    67            1                      47135     							rdin1 <= pwhite;
    68            1                    ***0***     						WHEN OTHERS => NULL;
    69                                             					END CASE;
    70                                             				WHEN pwhite =>
    71                                             					CASE pixopin(1) IS
    72                                             						WHEN '0' =>
    73            1                    5337784     							rdin1 <= pwhite;
    74                                             						WHEN '1' =>
    75            1                      47112     							rdin1 <= pblack;
    76            1                    ***0***     						WHEN OTHERS => NULL;
    77                                             					END CASE;
    78                                             				WHEN pinvert =>
    79                                             					IF (pixopin(1) XOR pixopin(0)) = '1' THEN
    80            1                      34748     						rdin1 <= pixopin;
    81                                             					ELSIF (pixopin(0) = '0') THEN
    82            1                      13759     						rdin1 <= pinvert;
    83                                             					ELSIF (pixopin(0) = '1') THEN
    84            1                    5272156     						rdin1 <= psame;
    85                                             					ELSE
    86            1                    ***0***     						NULL;
    87                                             					END IF;
    88            1                          1     				WHEN OTHERS => NULL;
    89                                             			END CASE;
    90                                             		ELSIF pw = '0' THEN
    91            1                    4638236     			rdin1 <= psame;
    92                                             		ELSE
    93            1                          1     			rdin1 <= pixopin;
    94                                             		END IF;
    95                                             	END PROCESS CHANGE;
    96                                             
    97            1                   19869548     	wen_concac <= wen_all & pw;
    98                                             
    99                                             	STORE_RAM : PROCESS
    100           1                          1     	BEGIN
    101                                            		--pixnum -> raddr1
    102           1                   68250642     		WAIT UNTIL rising_edge(clk);
    103                                            		IF reset = '1' THEN
    104           1                         10     			write_ram(rdout_par, '0', 0);
    105                                            		ELSE
    106                                            			IF wen_concac(1) = '1' THEN
    107           1                    4638236     				write_ram(rdout_par, wen_concac(0), to_integer(usgn(pixnum)));
    108                                            			ELSIF wen_concac(0) = '1' THEN
    109           1                   12021938     				rdout_par(to_integer(usgn(pixnum))) <= rdin1;
    110                                            			ELSE
    111           1                   51590457     				NULL;
    112                                            			END IF;
    113                                            		END IF;
    114                                            	END PROCESS STORE_RAM;
    115                                            
    116                                            	--propogate signal stuff
    117           1                   15464766     	store   <= rdout_par;
    118           1                   15464766     	is_same <= check_same(rdout_par);
    119           1                   27698239     	rdout1  <= rdout_par(to_integer(usgn(pixnum)));
    120                                            
    121                                            END ARCHITECTURE func;

Branch Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Branches                    29        23         6      79.3

================================Branch Details================================

Branch Coverage for file pix_word_cache.vhd --

------------------------------------IF Branch------------------------------------
    30                                75471200     Count coming in to IF
    30            1                   75471200     			IF comp_each = '0' THEN     --if comp_each is 0, just write all
    32            1                    ***0***     			ELSE
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    33                                 ***0***     Count coming in to IF
    33            1                    ***0***     				IF i /= index_in THEN
    35            1                    ***0***     				ELSE
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    45                               139525229     Count coming in to IF
    45            1                   12008178     			IF rdout_par(i) /= psame THEN
                                     127517051     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    58                                40100453     Count coming in to IF
    58            1                   35462216     		IF wen_all = '0' THEN
    90            1                    4638236     		ELSIF pw = '0' THEN
    92            1                          1     		ELSE
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    59                                35462216     Count coming in to CASE
    60            1                   19279214     				WHEN psame =>
    62            1                    5477442     				WHEN pblack =>
    70            1                    5384896     				WHEN pwhite =>
    78            1                    5320663     				WHEN pinvert =>
    88            1                          1     				WHEN OTHERS => NULL;
Branch totals: 5 hits of 5 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    63                                 5477442     Count coming in to CASE
    64            1                    5430307     						WHEN '0' =>
    66            1                      47135     						WHEN '1' =>
    68            1                    ***0***     						WHEN OTHERS => NULL;
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------CASE Branch------------------------------------
    71                                 5384896     Count coming in to CASE
    72            1                    5337784     						WHEN '0' =>
    74            1                      47112     						WHEN '1' =>
    76            1                    ***0***     						WHEN OTHERS => NULL;
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    79                                 5320663     Count coming in to IF
    79            1                      34748     					IF (pixopin(1) XOR pixopin(0)) = '1' THEN
    81            1                      13759     					ELSIF (pixopin(0) = '0') THEN
    83            1                    5272156     					ELSIF (pixopin(0) = '1') THEN
    85            1                    ***0***     					ELSE
Branch totals: 3 hits of 4 branches = 75.0%

------------------------------------IF Branch------------------------------------
    103                               68250641     Count coming in to IF
    103           1                         10     		IF reset = '1' THEN
    105           1                   68250631     		ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    106                               68250631     Count coming in to IF
    106           1                    4638236     			IF wen_concac(1) = '1' THEN
    108           1                   12021938     			ELSIF wen_concac(0) = '1' THEN
    110           1                   51590457     			ELSE
Branch totals: 3 hits of 3 branches = 100.0%


Condition Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Condition Terms          2         2         0     100.0

================================Condition Details================================

Condition Coverage for file pix_word_cache.vhd --

----------------Focused Condition View-------------------
Line       79 Item    1 					IF (pixopin(1) XOR pixopin(0)) = '1' THEN
Condition totals: 2 of 2 input terms covered = 100.0%

    Input Term   Covered  Reason for no coverage                  Hint
   -----------  --------  --------------------------------------  --------------
    pixopin(1)         Y
    pixopin(0)         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Matching input patterns(->0)         Matching input patterns(->1)
---------  ----------  ----------  --------------------  -----------------------------------  -----------------------------------
 Row   1:       13759       17402  pixopin(1)_0          { 00 }                               { 01 }
 Row   2:     5272156       17346  pixopin(1)_1          { 11 }                               { 10 }
 Row   3:       13759       17346  pixopin(0)_0          { 00 }                               { 10 }
 Row   4:     5272156       17402  pixopin(0)_1          { 11 }                               { 01 }

NOTE:
  * Order of matching input pattern values: {pixopin(1),pixopin(0)}


Expression Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Expression Terms         0         0         0     100.0
FSM Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    States                       0         0         0     100.0
    Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Toggle Bins                 34        33         1      97.0

================================Toggle Details================================

Toggle Coverage for File pix_word_cache.vhd --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
          8                                wen_all           1           1                              100.00 
          8                                  reset           1           0                               50.00 
          8                                     pw           1           1                              100.00 
          8                                    clk           1           1                              100.00 
          9                             pixopin(1)           1           1                              100.00 
          9                             pixopin(0)           1           1                              100.00 
         10                              pixnum(3)           1           1                              100.00 
         10                              pixnum(2)           1           1                              100.00 
         10                              pixnum(1)           1           1                              100.00 
         10                              pixnum(0)           1           1                              100.00 
         12                                is_same           1           1                              100.00 
         18                              rdout1(1)           1           1                              100.00 
         18                              rdout1(0)           1           1                              100.00 
         18                               rdin1(1)           1           1                              100.00 
         18                               rdin1(0)           1           1                              100.00 
         20                          wen_concac(1)           1           1                              100.00 
         20                          wen_concac(0)           1           1                              100.00 

Total Node Count     =         17 
Toggled Node Count   =         16 
Untoggled Node Count =          1 

Toggle Coverage      =       97.0% (33 of 34 bins)

File: pix_write_cache.vhd
Statement Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Stmts                       33        31         2      93.9

================================Statement Details================================

Statement Coverage for file pix_write_cache.vhd --

    1                                              LIBRARY ieee;
    2                                              USE IEEE.std_logic_1164.ALL;
    3                                              USE IEEE.numeric_std.ALL;
    4                                              USE work.project_pack.ALL;
    5                                              USE work.pix_cache_pak.ALL;
    6                                              
    7                                              ENTITY pix_write_cache IS
    8                                              	PORT(
    9                                              		clk, reset, start : IN  std_logic;
    10                                             		delay, vwrite     : OUT std_logic; --wait is a keyword, cannot be used
    11                                             		store             : IN  store_t;
    12                                             		addr              : IN  std_logic_vector(7 DOWNTO 0);
    13                                             		vaddr             : OUT std_logic_vector(7 DOWNTO 0);
    14                                             		vdout             : IN  std_logic_vector(RAM_WORD_SIZE - 1 DOWNTO 0);
    15                                             		vdin              : OUT std_logic_vector(RAM_WORD_SIZE - 1 DOWNTO 0)
    16                                             	);
    17                                             END ENTITY pix_write_cache;
    18                                             
    19                                             ARCHITECTURE memory_interface of pix_write_cache IS
    20                                             	ALIAS slv IS std_logic_vector;
    21                                             
    22                                             	TYPE state_t IS (m3, m2, m1, mx);
    23                                             	SIGNAL state, nstate : state_t;
    24                                             
    25                                             	SIGNAL reg_data : std_logic_vector(RAM_WORD_SIZE - 1 DOWNTO 0);
    26                                             	SIGNAL reg_addr : slv(7 DOWNTO 0);
    27                                             
    28                                             	SIGNAL vwrite_1, delay_1 : std_logic;
    29                                             
    30                                             BEGIN
    31                                             	R1 : PROCESS
    32            1                          1     	BEGIN
    33            1                   68250641     		WAIT UNTIL falling_edge(clk);
    34            1                   68250640     		reg_data <= vdout;
    35            1                   68250640     		reg_addr <= addr;
    36                                             	END PROCESS R1;
    37                                             
    38                                             	R2 : PROCESS
    39            1                          1     	BEGIN
    40            1                   68250642     		WAIT UNTIL rising_edge(clk);
    41                                             		IF reset = '1' THEN
    42            1                         10     			state <= mx;
    43                                             		ELSE
    44            1                   68250631     			state <= nstate;
    45                                             		END IF;
    46                                             	END PROCESS R2;
    47                                             
    48            1                   27829419     	FSM : PROCESS(state, start)
    49                                             	BEGIN
    50            1                   27829419     		vwrite_1 <= '0';
    51            1                   27829419     		delay_1  <= '0';
    52                                             		CASE state IS
    53                                             			WHEN mx =>
    54                                             				IF start = '1' THEN
    55            1                    4638236     					nstate <= m1;
    56                                             				ELSE
    57            1                    4638237     					nstate <= mx;
    58                                             				END IF;
    59                                             			WHEN m1 =>
    60            1                    9276472     				delay_1 <= start;
    61            1                    9276472     				nstate  <= m2;
    62                                             			WHEN m2 =>
    63            1                    4638236     				delay_1 <= start;
    64            1                    4638236     				nstate  <= m3;
    65                                             			WHEN m3 =>
    66                                             				IF start = '1' THEN
    67            1                    ***0***     					nstate <= m1;
    68                                             				ELSE
    69            1                    4638238     					nstate <= mx;
    70                                             				END IF;
    71            1                    4638238     				vwrite_1 <= '1';
    72            1                    ***0***     			WHEN OTHERS => NULL;
    73                                             		END CASE;
    74                                             	END PROCESS FSM;
    75            1                   11205486     DO_OP: process (store,reg_data) begin
    76            1                   11205486     	FOR i IN vdin'RANGE LOOP
    76            2                  179287776     
    77                                             		CASE store(i) IS
    78            1                  141382173     			WHEN psame   => vdin(i) <= reg_data(i);
    79            1                   12197400     			WHEN pwhite  => vdin(i) <= '0';
    80            1                   12426907     			WHEN pblack  => vdin(i) <= '1';
    81            1                   13281280     			WHEN pinvert => vdin(i) <= (NOT reg_data(i));
    82            1                         16     			WHEN OTHERS  => NULL;
    83                                             		END CASE;
    84            1                  179287776     	END LOOP;
    85                                             end process DO_OP;
    86            1                    3455979     	vaddr<=reg_addr;
    87            1                    9276475     	vwrite <= vwrite_1;
    88            1                    9276474     	delay  <= delay_1;
    89                                             
    90                                             END ARCHITECTURE memory_interface;

Branch Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Branches                    16        14         2      87.5

================================Branch Details================================

Branch Coverage for file pix_write_cache.vhd --

------------------------------------IF Branch------------------------------------
    41                                68250641     Count coming in to IF
    41            1                         10     		IF reset = '1' THEN
    43            1                   68250631     		ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    52                                27829419     Count coming in to CASE
    53            1                    9276473     			WHEN mx =>
    59            1                    9276472     			WHEN m1 =>
    62            1                    4638236     			WHEN m2 =>
    65            1                    4638238     			WHEN m3 =>
    72            1                    ***0***     			WHEN OTHERS => NULL;
Branch totals: 4 hits of 5 branches = 80.0%

------------------------------------IF Branch------------------------------------
    54                                 9276473     Count coming in to IF
    54            1                    4638236     				IF start = '1' THEN
    56            1                    4638237     				ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    66                                 4638238     Count coming in to IF
    66            1                    ***0***     				IF start = '1' THEN
    68            1                    4638238     				ELSE
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    77                               179287776     Count coming in to CASE
    78            1                  141382173     			WHEN psame   => vdin(i) <= reg_data(i);
    79            1                   12197400     			WHEN pwhite  => vdin(i) <= '0';
    80            1                   12426907     			WHEN pblack  => vdin(i) <= '1';
    81            1                   13281280     			WHEN pinvert => vdin(i) <= (NOT reg_data(i));
    82            1                         16     			WHEN OTHERS  => NULL;
Branch totals: 5 hits of 5 branches = 100.0%


Condition Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Condition Terms          0         0         0     100.0
Expression Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Expression Terms         0         0         0     100.0
FSM Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    States                       4         4         0     100.0
    Transitions                  8         5         3      62.5

================================FSM Details================================

FSM Coverage for file pix_write_cache.vhd --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  53                  mx                   3
  59                  m1                   2
  62                  m2                   1
  65                  m3                   0
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                      mx            54335933
                      m1             4638236
                      m2             4638236
                      m3             4638236
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
  55                   0             4638236          mx -> m1            
  57                   1            49697696          mx -> mx            
  61                   2             4638236          m1 -> m2            
  64                   4             4638236          m2 -> m3            
  69                   7             4638237          m3 -> mx            
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  42                   3          m1 -> mx            
  42                   5          m2 -> mx            
  67                   6          m3 -> m1            


    Summary                 Active      Hits    Misses % Covered
    -------                 ------      ----    ------ ---------
    States                       4         4         0     100.0
    Transitions                  8         5         3      62.5
Toggle Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Toggle Bins                124       122         2      98.3

================================Toggle Details================================

Toggle Coverage for File pix_write_cache.vhd --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
         12                                addr(7)           1           1                              100.00 
         12                                addr(6)           1           1                              100.00 
         12                                addr(5)           1           1                              100.00 
         12                                addr(4)           1           1                              100.00 
         12                                addr(3)           1           1                              100.00 
         12                                addr(2)           1           1                              100.00 
         12                                addr(1)           1           1                              100.00 
         12                                addr(0)           1           1                              100.00 
         13                               vaddr(7)           1           1                              100.00 
         13                               vaddr(6)           1           1                              100.00 
         13                               vaddr(5)           1           1                              100.00 
         13                               vaddr(4)           1           1                              100.00 
         13                               vaddr(3)           1           1                              100.00 
         13                               vaddr(2)           1           1                              100.00 
         13                               vaddr(1)           1           1                              100.00 
         13                               vaddr(0)           1           1                              100.00 
         14                               vdout(9)           1           1                              100.00 
         14                               vdout(8)           1           1                              100.00 
         14                               vdout(7)           1           1                              100.00 
         14                               vdout(6)           1           1                              100.00 
         14                               vdout(5)           1           1                              100.00 
         14                               vdout(4)           1           1                              100.00 
         14                               vdout(3)           1           1                              100.00 
         14                               vdout(2)           1           1                              100.00 
         14                              vdout(15)           1           1                              100.00 
         14                              vdout(14)           1           1                              100.00 
         14                              vdout(13)           1           1                              100.00 
         14                              vdout(12)           1           1                              100.00 
         14                              vdout(11)           1           1                              100.00 
         14                              vdout(10)           1           1                              100.00 
         14                               vdout(1)           1           1                              100.00 
         14                               vdout(0)           1           1                              100.00 
         23                                  state               ENUM type       Value       Count 
                                                                        m3           1      100.00 
                                                                        m2           1      100.00 
                                                                        m1           1      100.00 
                                                                        mx           1      100.00 
         23                                 nstate               ENUM type       Value       Count 
                                                                        m3           1      100.00 
                                                                        m2           1      100.00 
                                                                        m1           1      100.00 
                                                                        mx           1      100.00 
         25                            reg_data(9)           1           1                              100.00 
         25                            reg_data(8)           1           1                              100.00 
         25                            reg_data(7)           1           1                              100.00 
         25                            reg_data(6)           1           1                              100.00 
         25                            reg_data(5)           1           1                              100.00 
         25                            reg_data(4)           1           1                              100.00 
         25                            reg_data(3)           1           1                              100.00 
         25                            reg_data(2)           1           1                              100.00 
         25                           reg_data(15)           1           1                              100.00 
         25                           reg_data(14)           1           1                              100.00 
         25                           reg_data(13)           1           1                              100.00 
         25                           reg_data(12)           1           1                              100.00 
         25                           reg_data(11)           1           1                              100.00 
         25                           reg_data(10)           1           1                              100.00 
         25                            reg_data(1)           1           1                              100.00 
         25                            reg_data(0)           1           1                              100.00 
         26                            reg_addr(7)           1           1                              100.00 
         26                            reg_addr(6)           1           1                              100.00 
         26                            reg_addr(5)           1           1                              100.00 
         26                            reg_addr(4)           1           1                              100.00 
         26                            reg_addr(3)           1           1                              100.00 
         26                            reg_addr(2)           1           1                              100.00 
         26                            reg_addr(1)           1           1                              100.00 
         26                            reg_addr(0)           1           1                              100.00 
         28                               vwrite_1           1           1                              100.00 
         28                                delay_1           0           0                                0.00 

Total Node Count     =         66 
Toggled Node Count   =         65 
Untoggled Node Count =          1 

Toggle Coverage      =       98.3% (122 of 124 bins)

File: project_pack.vhd
Statement Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Stmts                       13        10         3      76.9

================================Statement Details================================

Statement Coverage for file project_pack.vhd --

    1                                              USE WORK.config_pack.ALL;
    2                                              USE work.pix_cache_pak.ALL;
    3                                              LIBRARY IEEE;
    4                                              USE IEEE.std_logic_1164.ALL;
    5                                              USE IEEE.numeric_std.ALL;
    6                                              
    7                                              PACKAGE project_pack IS
    8                                              	CONSTANT RAM_WORD_SIZE : INTEGER := 16; -- fixed for this project could be changed by other applications
    9                                              
    10                                             	SUBTYPE hostop_t is std_logic_vector(1 downto 0);
    11                                             	SUBTYPE hostpen_t is std_logic_vector(1 downto 0);
    12                                             	SUBTYPE seloutmux_t is std_logic_vector(1 DOWNTO 0);
    13                                             	SUBTYPE rcb_cmd_t IS std_logic_vector(2 DOWNTO 0);
    14                                             
    15                                             	constant MovePen     : hostop_t := "00";
    16                                             	constant DrawLine    : hostop_t := "01";
    17                                             	constant ClearScreen : hostop_t := "10";
    18                                             	constant Unused      : hostop_t := "11";
    19                                             
    20                                             	constant Notused : hostpen_t := "00";
    21                                             	constant White   : hostpen_t := "01";
    22                                             	constant Black   : hostpen_t := "10";
    23                                             	constant Invert  : hostpen_t := "11";
    24                                             
    25                                             	CONSTANT mux_hold     : seloutmux_t := "00";
    26                                             	CONSTANT mux_draw_dot  : seloutmux_t := "01";
    27                                             	CONSTANT mux_draw_line : seloutmux_t := "10";
    28                                             	CONSTANT mux_clear    : seloutmux_t := "11";
    29                                             
    30                                             	CONSTANT rcb_unused       : rcb_cmd_t := "100";
    31                                             	CONSTANT rcb_draw_white   : rcb_cmd_t := "001";
    32                                             	CONSTANT rcb_draw_black   : rcb_cmd_t := "010";
    33                                             	CONSTANT rcb_draw_invert  : rcb_cmd_t := "011";
    34                                             	CONSTANT rcb_move         : rcb_cmd_t := "000";
    35                                             	CONSTANT rcb_clear_white  : rcb_cmd_t := "101";
    36                                             	CONSTANT rcb_clear_black  : rcb_cmd_t := "110";
    37                                             	CONSTANT rcb_clear_invert : rcb_cmd_t := "111";
    38                                             
    39                                             	CONSTANT rcb_flush_latency          : INTEGER := 30;
    40                                             	CONSTANT rcb_flush_latency_slv_size : INTEGER := 8;
    41                                             
    42                                             	TYPE db_2_rcb IS RECORD             -- possible type for interface from DB to RCD. Change as required
    43                                             		X, Y     : std_logic_vector(VSIZE - 1 DOWNTO 0);
    44                                             		rcb_cmd  : std_logic_vector(2 DOWNTO 0);
    45                                             		startcmd : std_logic;
    46                                             	END RECORD;
    47                                             
    48                                             	TYPE my_xy IS RECORD
    49                                             		x1, x2, y1, y2 : std_logic_vector(VSIZE - 1 DOWNTO 0);
    50                                             	END RECORD;
    51                                             	TYPE my_xy_out IS RECORD
    52                                             		xout, yout : std_logic_vector(VSIZE - 1 DOWNTO 0);
    53                                             	END RECORD;
    54                                             
    55                                             	TYPE control IS RECORD
    56                                             		swapxy, negx, negy : std_logic;
    57                                             	END RECORD;
    58                                             
    59                                             	--function that apply operation onto a pixel word with width 16
    60                                             	FUNCTION my_minmax(i : my_xy; max : std_logic) RETURN my_xy_out;
    61                                             
    62                                             END PACKAGE project_pack;
    63                                             
    64                                             package body project_pack is
    65                                             	FUNCTION my_minmax(i : my_xy; max : std_logic) RETURN my_xy_out IS
    66                                             		VARIABLE tmp : std_logic_vector(1 DOWNTO 0) := "00";
    67                                             	BEGIN
    68                                             		IF unsigned(i.x2) < unsigned(i.x1) THEN
    69            1                      68925     			tmp(1) := '1';
    70                                             		END IF;
    71                                             		IF unsigned(i.y2) < unsigned(i.y1) THEN
    72            1                      69349     			tmp(0) := '1';
    73                                             		END IF;
    74                                             		IF max = '1' THEN
    75                                             			CASE (tmp) IS
    76            1                       5214     				WHEN "00"   => RETURN (i.x2, i.y2);
    77            1                       5048     				WHEN "01"   => RETURN (i.x2, i.y1);
    78            1                       4861     				WHEN "10"   => RETURN (i.x1, i.y2);
    79            1                       4934     				WHEN "11"   => RETURN (i.x1, i.y1);
    80            1                    ***0***     				WHEN OTHERS => NULL;
    81                                             			END CASE;
    82                                             		ELSE
    83                                             			CASE (tmp) IS
    84            1                      31127     				WHEN "00"   => RETURN (i.x1, i.y1);
    85            1                      30083     				WHEN "01"   => RETURN (i.x1, i.y2);
    86            1                      29846     				WHEN "10"   => RETURN (i.x2, i.y1);
    87            1                      29284     				WHEN "11"   => RETURN (i.x2, i.y2);
    88            1                    ***0***     				WHEN OTHERS => NULL;
    89                                             			END CASE;
    90                                             		END IF;
    91                                             		--should never hit this return, so just return one of the values
    92            1                    ***0***     		RETURN (i.x1, i.y1);
    93                                             	END FUNCTION my_minmax;
    94                                             
    95                                             end project_pack;

Branch Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Branches                    16        14         2      87.5

================================Branch Details================================

Branch Coverage for file project_pack.vhd --

------------------------------------IF Branch------------------------------------
    68                                  140397     Count coming in to IF
    68            1                      68925     		IF unsigned(i.x2) < unsigned(i.x1) THEN
                                         71472     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    71                                  140397     Count coming in to IF
    71            1                      69349     		IF unsigned(i.y2) < unsigned(i.y1) THEN
                                         71048     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    74                                  140397     Count coming in to IF
    74            1                      20057     		IF max = '1' THEN
    82            1                     120340     		ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    75                                   20057     Count coming in to CASE
    76            1                       5214     				WHEN "00"   => RETURN (i.x2, i.y2);
    77            1                       5048     				WHEN "01"   => RETURN (i.x2, i.y1);
    78            1                       4861     				WHEN "10"   => RETURN (i.x1, i.y2);
    79            1                       4934     				WHEN "11"   => RETURN (i.x1, i.y1);
    80            1                    ***0***     				WHEN OTHERS => NULL;
Branch totals: 4 hits of 5 branches = 80.0%

------------------------------------CASE Branch------------------------------------
    83                                  120340     Count coming in to CASE
    84            1                      31127     				WHEN "00"   => RETURN (i.x1, i.y1);
    85            1                      30083     				WHEN "01"   => RETURN (i.x1, i.y2);
    86            1                      29846     				WHEN "10"   => RETURN (i.x2, i.y1);
    87            1                      29284     				WHEN "11"   => RETURN (i.x2, i.y2);
    88            1                    ***0***     				WHEN OTHERS => NULL;
Branch totals: 4 hits of 5 branches = 80.0%


Condition Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Condition Terms          0         0         0     100.0
Expression Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Expression Terms         0         0         0     100.0
FSM Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    States                       0         0         0     100.0
    Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Toggle Bins                  0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File project_pack.vhd --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

File: rcb.vhd
Statement Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Stmts                       95        92         3      96.8

================================Statement Details================================

Statement Coverage for file rcb.vhd --

    1                                              LIBRARY ieee;
    2                                              USE IEEE.std_logic_1164.ALL;
    3                                              USE IEEE.numeric_std.ALL;
    4                                              USE work.project_pack.ALL;
    5                                              USE work.pix_cache_pak.ALL;
    6                                              USE work.pix_write_cache;
    7                                              USE work.pix_word_cache;
    8                                              use work.all;
    9                                              
    10                                             ENTITY rcb IS
    11                                             	GENERIC(VSIZE : INTEGER := 6);
    12                                             	PORT(
    13                                             		clk          : IN  std_logic;
    14                                             		reset        : IN  std_logic;
    15                                             
    16                                             		-- db connections
    17                                             		dbb_bus      : IN  db_2_rcb;
    18                                             		dbb_delaycmd : OUT STD_LOGIC;
    19                                             
    20                                             		-- vram connections
    21                                             		vdout        : IN  STD_LOGIC_VECTOR(15 DOWNTO 0);
    22                                             		vdin         : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
    23                                             		vwrite       : OUT STD_LOGIC;
    24                                             		vaddr        : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    25                                             
    26                                             		-- vdp connection
    27                                             		rcb_finish   : OUT STD_LOGIC
    28                                             	);
    29                                             END rcb;
    30                                             
    31                                             ARCHITECTURE rtl1 OF rcb IS
    32                                             	ALIAS slv IS std_logic_vector;
    33                                             	ALIAS usgn IS unsigned;
    34                                             	--output
    35                                             	SIGNAL rcb_finish_1 : std_logic;
    36                                             
    37                                             	--wire
    38                                             	SIGNAL x_in            : slv(5 DOWNTO 0);
    39                                             	SIGNAL y_in            : slv(5 DOWNTO 0);
    40                                             	SIGNAL equal_block_out : std_logic;
    41                                             	SIGNAL split_word_addr : slv(7 DOWNTO 0);
    42                                             
    43                                             	--Register 
    44                                             	SIGNAL word_reg_out  : slv(7 DOWNTO 0);
    45                                             	SIGNAL x_clear_reg   : slv(5 DOWNTO 0);
    46                                             	SIGNAL y_clear_reg   : slv(5 DOWNTO 0);
    47                                             	SIGNAL x_clear_start : slv(5 DOWNTO 0);
    48                                             	SIGNAL y_clear_start : slv(5 DOWNTO 0);
    49                                             	SIGNAL pixop_reg     : store_t;
    50                                             
    51                                             	--Register enable
    52                                             	SIGNAL clear_reg_en : std_logic;
    53                                             	signal word_reg_en  : std_logic;
    54                                             	signal pixop_reg_en : std_logic;
    55                                             
    56                                             	--Clear counter control signal
    57                                             	signal diff_x    : slv(5 DOWNTO 0);
    58                                             	signal diff_y    : slv(5 DOWNTO 0);
    59                                             	signal clear_run : std_logic;
    60                                             
    61                                             	--rcb FSM state
    62                                             	TYPE rcb_state_t IS (idle, move, flush_init, flush_done, draw, clear);
    63                                             	SIGNAL rcb_state		: rcb_state_t;
    64                                             	signal nstate			: rcb_state_t;
    65                                             
    66                                             
    67                                             	SIGNAL rcb_flush_downcount : slv(rcb_flush_latency_slv_size - 1 DOWNTO 0);
    68                                             	SIGNAL rcb_ready           : std_logic;
    69                                             
    70                                             	--rmw FSM handshake SIGNAL
    71                                             	SIGNAL rmw_start  : std_logic;
    72                                             	SIGNAL rmw_delay  : std_logic;
    73                                             	SIGNAL rmw_vwrite : std_logic;
    74                                             
    75                                             	--pix_word_cache stuff
    76                                             	SIGNAL wen_all, pw : std_logic;
    77                                             	SIGNAL pixopin     : pixop_t;
    78                                             	SIGNAL pixnum      : slv(3 DOWNTO 0);
    79                                             	SIGNAL is_same     : std_logic;
    80                                             	SIGNAL store       : store_t;
    81                                             
    82                                             BEGIN
    83                                             
    84                                             	--wire assignment 
    85                                             	--assert rcb_finish when block is inactive and waiting
    86                                             	--no pixel write
    87                                             	--pix ram cache is empty
    88                                             	--ram inactive
    89            1                    6159968     	dbb_delaycmd <= NOT rcb_ready;
    90            1                    2364518     	rcb_finish   <= rcb_finish_1;
    91            1                   11786178     	diff_x       <= slv(usgn(dbb_bus.x) - usgn(x_clear_reg));
    92            1                    2075715     	diff_y       <= slv(usgn(dbb_bus.y) - usgn(y_clear_reg));
    93                                             
    94                                             	--Pix_word_cache entity
    95                                             	PWC : ENTITY work.pix_word_cache PORT MAP(
    96                                             			clk     => clk,
    97                                             			reset   => reset,
    98                                             			wen_all => wen_all,
    99                                             			pw      => pw,
    100                                            			pixopin => pixopin,
    101                                            			pixnum  => slv(pixnum),
    102                                            			is_same => is_same,
    103                                            			store   => store
    104                                            		);
    105                                            
    106                                            	--pix_write_cache entity
    107                                            	PWC2 : ENTITY work.pix_write_cache PORT MAP(
    108                                            			clk    => clk,
    109                                            			reset  => reset,
    110                                            			start  => rmw_start,
    111                                            			delay  => rmw_delay,
    112                                            			vwrite => rmw_vwrite,
    113                                            			store  => pixop_reg,
    114                                            			addr   => word_reg_out,
    115                                            			vaddr  => vaddr,
    116                                            			vdin   => vdin,
    117                                            			vdout  => vdout
    118                                            		);
    119                                            
    120                                            	--XYMUX,sel needed to be controlled by RCB-FSM
    121           1                   12715193     	xymux : PROCESS(dbb_bus, x_clear_reg, y_clear_reg)
    122                                            	BEGIN
    123                                            		IF (dbb_bus.rcb_cmd = rcb_draw_white) OR (dbb_bus.rcb_cmd = rcb_draw_black) OR (dbb_bus.rcb_cmd = rcb_draw_invert) or (dbb_bus.rcb_cmd = rcb_move) THEN
    124           1                    2394187     			x_in <= dbb_bus.x;
    125           1                    2394187     			y_in <= dbb_bus.y;
    126                                            		ELSE
    127           1                   10321006     			x_in <= x_clear_reg;
    128           1                   10321006     			y_in <= y_clear_reg;
    129                                            		END IF;
    130                                            	END PROCESS xymux;
    131                                            
    132                                            	--equal block
    133           1                    7188794     	EQUAL : PROCESS(split_word_addr, word_reg_out)
    134                                            	BEGIN
    135                                            		IF usgn(split_word_addr) = usgn(word_reg_out) THEN
    136           1                    3560079     			equal_block_out <= '1';
    137                                            		ELSE
    138           1                    3628715     			equal_block_out <= '0';
    139                                            		END IF;
    140                                            	END PROCESS EQUAL;
    141                                            
    142           1                   12258011     	SPLIT : PROCESS(x_in, y_in)
    143                                            	BEGIN
    144           1                   12258011     		pixnum          <= y_in(1 DOWNTO 0) & x_in(1 DOWNTO 0);
    145           1                   12258011     		split_word_addr <= y_in(5 DOWNTO 2) & x_in(5 DOWNTO 2);
    146                                            
    147                                            	END PROCESS SPLIT;
    148                                            
    149                                            	--pixop decoder
    150           1                    2550967     	dbb2pixop : process(dbb_bus)
    151                                            	begin
    152                                            		case dbb_bus.rcb_cmd is
    153           1                      76447     			when rcb_unused       => pixopin <= psame;
    154           1                     734667     			when rcb_draw_white   => pixopin <= pwhite;
    155           1                     727125     			when rcb_draw_black   => pixopin <= pblack;
    156           1                     741118     			when rcb_draw_invert  => pixopin <= pinvert;
    157           1                     171323     			when rcb_move         => pixopin <= psame;
    158           1                      33520     			when rcb_clear_white  => pixopin <= pwhite;
    159           1                      33520     			when rcb_clear_black  => pixopin <= pblack;
    160           1                      33245     			when rcb_clear_invert => pixopin <= pinvert;
    161           1                          2     			when others           => NULL;
    162                                            		end case;
    163                                            
    164                                            	end process dbb2pixop;
    165                                            	--RCB-FSM Registered process
    166                                            	R1 : PROCESS
    167                                            	BEGIN
    168                                            		WAIT UNTIL clk'EVENT AND clk = '1';
    169                                            		IF reset = '1' THEN
    170                                            			--reset all register 
    171           1                         10     			rcb_state           <= idle;
    172           1                         10     			word_reg_out        <= (OTHERS => '0');
    173           1                         10     			x_clear_reg         <= (OTHERS => '0');
    174           1                         10     			y_clear_reg         <= (OTHERS => '0');
    175           1                         10     			x_clear_start       <= (OTHERS => '0');
    176           1                         10     			y_clear_start       <= (OTHERS => '0');
    177           1                         10     			pixop_reg           <= (OTHERS => psame);
    178           1                         10     			rcb_flush_downcount <= slv(to_unsigned(rcb_flush_latency, rcb_flush_downcount'LENGTH));
    179                                            		ELSE
    180                                            			IF dbb_bus.startcmd = '0' THEN
    181                                            				if usgn(rcb_flush_downcount) /= 0 then
    182           1                   35848768     					rcb_flush_downcount <= slv(usgn(rcb_flush_downcount) - 1);
    183                                            				else
    184           1                    1182259     					rcb_flush_downcount <= slv(to_unsigned(rcb_flush_latency, rcb_flush_downcount'LENGTH));
    185                                            				end if;
    186                                            			ELSE
    187           1                   31219604     				rcb_flush_downcount <= slv(to_unsigned(rcb_flush_latency, rcb_flush_downcount'LENGTH));
    188                                            			END IF;
    189                                            
    190           1                   68250631     			rcb_state <= nstate;
    191                                            
    192                                            			if word_reg_en = '1' then
    193           1                    3455977     				word_reg_out <= slv(usgn(split_word_addr));
    194                                            			end if;
    195                                            			if pixop_reg_en = '1' then
    196           1                    4638236     				pixop_reg <= store;
    197                                            			end if;
    198                                            
    199                                            			if clear_reg_en = '1' then
    200           1                      36578     				x_clear_reg   <= x_in;
    201           1                      36578     				y_clear_reg   <= y_in;
    202           1                      36578     				x_clear_start <= x_in;
    203           1                      36578     				y_clear_start <= y_in;
    204                                            			end if;
    205                                            
    206                                            			if clear_run = '1' then
    207                                            				if usgn(diff_x) = 0 then
    208                                            					if usgn(diff_y) = 0 then
    209                                            						--dx=0 and  dy=0 
    210           1                    ***0***     						NULL;
    211                                            					else
    212                                            						--dx=0 and dy!=0
    213           1                     429256     						y_clear_reg <= slv(usgn(y_clear_reg) + 1);
    214           1                     429256     						x_clear_reg <= x_clear_start;
    215                                            					end if;
    216                                            				else
    217           1                    9715015     					x_clear_reg <= slv(usgn(x_clear_reg) + 1);
    218                                            				end if;
    219                                            			end if;
    220                                            		END IF;
    221                                            
    222                                            	END PROCESS R1;
    223                                            
    224                                            	--RCB-FSM combinational process
    225           1                   92082017     	C1 : PROCESS(rcb_state, rcb_flush_downcount, rcb_ready, dbb_bus, reset, is_same, rmw_vwrite, equal_block_out, diff_x, diff_y)
    226                                            	BEGIN
    227                                            		--defaults
    228           1                   92082017     		pw           <= '0';
    229           1                   92082017     		wen_all      <= '0';
    230           1                   92082017     		rmw_start    <= '0';
    231           1                   92082017     		rmw_delay    <= '0';
    232           1                   92082017     		rcb_ready    <= '0';
    233           1                   92082017     		vwrite       <= '0';
    234           1                   92082017     		rcb_finish_1 <= '0';
    235           1                   92082017     		pixop_reg_en <= '0';
    236           1                   92082017     		word_reg_en  <= '0';
    237           1                   92082017     		clear_reg_en <= '0';
    238           1                   92082017     		clear_run    <= '0';
    239                                            
    240                                            		CASE (rcb_state) IS
    241                                            			WHEN idle =>
    242           1                   39747456     				rcb_ready <= '1';
    243                                            				IF dbb_bus.startcmd = '0' THEN
    244                                            					--clear cache if wait > N cycles
    245                                            					IF usgn(rcb_flush_downcount) = 0 THEN
    246           1                    1182259     						nstate <= flush_init;
    247                                            					else
    248           1                   34413965     						nstate <= idle;
    249                                            					END IF;
    250                                            				ELSE
    251                                            					--if startcommand, check same/new word
    252                                            					IF (dbb_bus.rcb_cmd = rcb_draw_white OR dbb_bus.rcb_cmd = rcb_draw_black OR dbb_bus.rcb_cmd = rcb_draw_invert) THEN
    253           1                    3931347     						nstate <= draw;
    254                                            					elsif dbb_bus.rcb_cmd = rcb_move then
    255           1                     119598     						nstate <= move;
    256                                            					else
    257           1                     100287     						nstate <= clear;
    258                                            					END IF;
    259                                            				END IF;
    260                                            			WHEN flush_init =>
    261                                            				--rmw write to RAM
    262           1                    5837014     				rmw_start    <= '1';
    263           1                    5837014     				rmw_delay    <= '0';
    264                                            				--pix cache write all
    265           1                    5837014     				wen_all      <= '1';
    266           1                    5837014     				pixop_reg_en <= '1';
    267           1                    5837014     				nstate       <= flush_done;
    268                                            			WHEN flush_done =>
    269           1                   15095677     				vwrite <= rmw_vwrite;
    270                                            				IF rmw_vwrite = '1' THEN
    271                                            					if dbb_bus.startcmd = '0' then
    272           1                    1182259     						nstate <= idle;
    273                                            					else
    274           1                    3455977     						word_reg_en <= '1';
    275                                            						case dbb_bus.rcb_cmd is
    276           1                     612168     							when rcb_draw_white | rcb_draw_black | rcb_draw_invert    => nstate <= draw;
    277           1                    2827288     							when rcb_clear_white | rcb_clear_black | rcb_clear_invert => nstate <= clear;
    278           1                      16521     							when rcb_move                                             => nstate <= move;
    279           1                    ***0***     							when others                                               => nstate <= idle;
    280                                            						end case;
    281                                            
    282                                            					END IF;
    283                                            				else
    284           1                   10457441     					nstate <= flush_done;
    285                                            				end if;
    286                                            
    287                                            			WHEN move =>
    288           1                     129791     				clear_reg_en <= '1';
    289                                            				if dbb_bus.startcmd = '1' then
    290                                            					if equal_block_out = '1' then
    291           1                      43650     						nstate <= idle;
    292                                            					else
    293           1                      66084     						nstate <= flush_init;
    294                                            					end if;
    295                                            				else
    296           1                      20057     					nstate <= move;
    297                                            				end if;
    298                                            
    299                                            			WHEN draw =>
    300           1                    9738428     				pw <= equal_block_out;
    301                                            				IF dbb_bus.startcmd = '1' THEN
    302                                            					if equal_block_out = '1' then
    303           1                    8493450     						nstate <= idle;
    304                                            					else
    305           1                    1244933     						nstate <= flush_init;
    306                                            					end if;
    307                                            
    308                                            				else
    309           1                         45     					nstate <= idle;
    310                                            				end if;
    311                                            
    312                                            			WHEN clear =>
    313           1                   21533651     				pw <= equal_block_out;
    314                                            				if equal_block_out = '1' then
    315                                            					if usgn(diff_x) = 0 and usgn(diff_y) = 0 then
    316           1                      29637     						clear_run <= '0';
    317           1                      29637     						nstate    <= idle;
    318                                            					else
    319           1                   15849438     						clear_run <= '1';
    320           1                   15849438     						nstate    <= clear;
    321                                            					end if;
    322                                            				else
    323           1                    5654576     					clear_run <= '0';
    324           1                    5654576     					nstate    <= flush_init;
    325                                            				end if;
    326                                            
    327           1                    ***0***     			WHEN OTHERS => NULL;
    328                                            		END CASE;
    329                                            
    330                                            		--finish signal
    331                                            		IF (usgn(rcb_flush_downcount) = 0) THEN
    332           1                    1182259     			rcb_finish_1 <= rcb_ready AND (NOT dbb_bus.startcmd) AND (NOT reset) AND is_same;
    333                                            		END IF;
    334                                            
    335                                            	END PROCESS C1;
    336                                            
    337                                            END ARCHITECTURE rtl1;      

Branch Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Branches                    71        68         3      95.7

================================Branch Details================================

Branch Coverage for file rcb.vhd --

------------------------------------IF Branch------------------------------------
    123                               12715193     Count coming in to IF
    123           1                    2394187     		IF (dbb_bus.rcb_cmd = rcb_draw_white) OR (dbb_bus.rcb_cmd = rcb_draw_black) OR (dbb_bus.rcb_cmd = rcb_draw_invert) or (dbb_bus.rcb_cmd = rcb_move) THEN
    126           1                   10321006     		ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    135                                7188794     Count coming in to IF
    135           1                    3560079     		IF usgn(split_word_addr) = usgn(word_reg_out) THEN
    137           1                    3628715     		ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    152                                2550967     Count coming in to CASE
    153           1                      76447     			when rcb_unused       => pixopin <= psame;
    154           1                     734667     			when rcb_draw_white   => pixopin <= pwhite;
    155           1                     727125     			when rcb_draw_black   => pixopin <= pblack;
    156           1                     741118     			when rcb_draw_invert  => pixopin <= pinvert;
    157           1                     171323     			when rcb_move         => pixopin <= psame;
    158           1                      33520     			when rcb_clear_white  => pixopin <= pwhite;
    159           1                      33520     			when rcb_clear_black  => pixopin <= pblack;
    160           1                      33245     			when rcb_clear_invert => pixopin <= pinvert;
    161           1                          2     			when others           => NULL;
Branch totals: 9 hits of 9 branches = 100.0%

------------------------------------IF Branch------------------------------------
    169                               68250641     Count coming in to IF
    169           1                         10     		IF reset = '1' THEN
    179           1                   68250631     		ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    180                               68250631     Count coming in to IF
    180           1                   37031027     			IF dbb_bus.startcmd = '0' THEN
    186           1                   31219604     			ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    181                               37031027     Count coming in to IF
    181           1                   35848768     				if usgn(rcb_flush_downcount) /= 0 then
    183           1                    1182259     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    192                               68250631     Count coming in to IF
    192           1                    3455977     			if word_reg_en = '1' then
                                      64794654     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    195                               68250631     Count coming in to IF
    195           1                    4638236     			if pixop_reg_en = '1' then
                                      63612395     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    199                               68250631     Count coming in to IF
    199           1                      36578     			if clear_reg_en = '1' then
                                      68214053     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    206                               68250631     Count coming in to IF
    206           1                   10144271     			if clear_run = '1' then
                                      58106360     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    207                               10144271     Count coming in to IF
    207           1                     429256     				if usgn(diff_x) = 0 then
    216           1                    9715015     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    208                                 429256     Count coming in to IF
    208           1                    ***0***     					if usgn(diff_y) = 0 then
    211           1                     429256     					else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    240                               92082017     Count coming in to CASE
    241           1                   39747456     			WHEN idle =>
    260           1                    5837014     			WHEN flush_init =>
    268           1                   15095677     			WHEN flush_done =>
    287           1                     129791     			WHEN move =>
    299           1                    9738428     			WHEN draw =>
    312           1                   21533651     			WHEN clear =>
    327           1                    ***0***     			WHEN OTHERS => NULL;
Branch totals: 6 hits of 7 branches = 85.7%

------------------------------------IF Branch------------------------------------
    243                               39747456     Count coming in to IF
    243           1                   35596224     				IF dbb_bus.startcmd = '0' THEN
    250           1                    4151232     				ELSE
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    245                               35596224     Count coming in to IF
    245           1                    1182259     					IF usgn(rcb_flush_downcount) = 0 THEN
    247           1                   34413965     					else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    252                                4151232     Count coming in to IF
    252           1                    3931347     					IF (dbb_bus.rcb_cmd = rcb_draw_white OR dbb_bus.rcb_cmd = rcb_draw_black OR dbb_bus.rcb_cmd = rcb_draw_invert) THEN
    254           1                     119598     					elsif dbb_bus.rcb_cmd = rcb_move then
    256           1                     100287     					else
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------IF Branch------------------------------------
    270                               15095677     Count coming in to IF
    270           1                    4638236     				IF rmw_vwrite = '1' THEN
    283           1                   10457441     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    271                                4638236     Count coming in to IF
    271           1                    1182259     					if dbb_bus.startcmd = '0' then
    273           1                    3455977     					else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    275                                3455977     Count coming in to CASE
    276           1                     204439     							when rcb_draw_white | rcb_draw_black | rcb_draw_invert    => nstate <= draw;
    276           2                     201908     
    276           3                     205821     
    277           1                     935427     							when rcb_clear_white | rcb_clear_black | rcb_clear_invert => nstate <= clear;
    277           2                     960020     
    277           3                     931841     
    278           1                      16521     							when rcb_move                                             => nstate <= move;
    279           1                    ***0***     							when others                                               => nstate <= idle;
Branch totals: 7 hits of 8 branches = 87.5%

------------------------------------IF Branch------------------------------------
    289                                 129791     Count coming in to IF
    289           1                     109734     				if dbb_bus.startcmd = '1' then
    295           1                      20057     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    290                                 109734     Count coming in to IF
    290           1                      43650     					if equal_block_out = '1' then
    292           1                      66084     					else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    301                                9738428     Count coming in to IF
    301           1                    9738383     				IF dbb_bus.startcmd = '1' THEN
    308           1                         45     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    302                                9738383     Count coming in to IF
    302           1                    8493450     					if equal_block_out = '1' then
    304           1                    1244933     					else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    314                               21533651     Count coming in to IF
    314           1                   15879075     				if equal_block_out = '1' then
    322           1                    5654576     				else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    315                               15879075     Count coming in to IF
    315           1                      29637     					if usgn(diff_x) = 0 and usgn(diff_y) = 0 then
    318           1                   15849438     					else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    331                               92082017     Count coming in to IF
    331           1                    1182259     		IF (usgn(rcb_flush_downcount) = 0) THEN
                                      90899758     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Condition Terms          9         9         0     100.0

================================Condition Details================================

Condition Coverage for file rcb.vhd --

----------------Focused Condition View-------------------
Line       123 Item    1 		IF (dbb_bus.rcb_cmd = rcb_draw_white) OR (dbb_bus.rcb_cmd = rcb_draw_black) OR (dbb_bus.rcb_cmd = rcb_draw_invert) or (dbb_bus.rcb_cmd = rcb_move) THEN
Condition totals: 4 of 4 input terms covered = 100.0%

                           Input Term   Covered  Reason for no coverage   Hint
                          -----------  --------  -----------------------  --------------
   (dbb_bus.rcb_cmd = rcb_draw_white)         Y
   (dbb_bus.rcb_cmd = rcb_draw_black)         Y
  (dbb_bus.rcb_cmd = rcb_draw_invert)         Y
         (dbb_bus.rcb_cmd = rcb_move)         Y

     Rows:       Hits  FEC Target                             Matching input patterns       
 ---------  ---------  --------------------                   -------------------------     
  Row   1:   10321006  (dbb_bus.rcb_cmd = rcb_draw_white)_0   { 0000 }                      
  Row   2:     734667  (dbb_bus.rcb_cmd = rcb_draw_white)_1   { 1--- }                      
  Row   3:   10321006  (dbb_bus.rcb_cmd = rcb_draw_black)_0   { 0000 }                      
  Row   4:     727125  (dbb_bus.rcb_cmd = rcb_draw_black)_1   { 01-- }                      
  Row   5:   10321006  (dbb_bus.rcb_cmd = rcb_draw_invert)_0  { 0000 }                      
  Row   6:     741118  (dbb_bus.rcb_cmd = rcb_draw_invert)_1  { 001- }                      
  Row   7:   10321006  (dbb_bus.rcb_cmd = rcb_move)_0         { 0000 }                      
  Row   8:     191277  (dbb_bus.rcb_cmd = rcb_move)_1         { 0001 }                      

NOTE:
  * Order of matching input pattern values: {(dbb_bus.rcb_cmd = rcb_draw_white),(dbb_bus.rcb_cmd = rcb_draw_black),(dbb_bus.rcb_cmd = rcb_draw_invert),(dbb_bus.rcb_cmd = rcb_move)}

----------------Focused Condition View-------------------
Line       252 Item    1 					IF (dbb_bus.rcb_cmd = rcb_draw_white OR dbb_bus.rcb_cmd = rcb_draw_black OR dbb_bus.rcb_cmd = rcb_draw_invert) THEN
Condition totals: 3 of 3 input terms covered = 100.0%

                           Input Term   Covered  Reason for no coverage   Hint
                          -----------  --------  -----------------------  --------------
   (dbb_bus.rcb_cmd = rcb_draw_white)         Y
   (dbb_bus.rcb_cmd = rcb_draw_black)         Y
  (dbb_bus.rcb_cmd = rcb_draw_invert)         Y

     Rows:       Hits  FEC Target                             Matching input patterns       
 ---------  ---------  --------------------                   -------------------------     
  Row   1:     219885  (dbb_bus.rcb_cmd = rcb_draw_white)_0   { 000 }                       
  Row   2:    1311662  (dbb_bus.rcb_cmd = rcb_draw_white)_1   { 1-- }                       
  Row   3:     219885  (dbb_bus.rcb_cmd = rcb_draw_black)_0   { 000 }                       
  Row   4:    1297088  (dbb_bus.rcb_cmd = rcb_draw_black)_1   { 01- }                       
  Row   5:     219885  (dbb_bus.rcb_cmd = rcb_draw_invert)_0  { 000 }                       
  Row   6:    1322597  (dbb_bus.rcb_cmd = rcb_draw_invert)_1  { 001 }                       

NOTE:
  * Order of matching input pattern values: {(dbb_bus.rcb_cmd = rcb_draw_white),(dbb_bus.rcb_cmd = rcb_draw_black),(dbb_bus.rcb_cmd = rcb_draw_invert)}

----------------Focused Condition View-------------------
Line       315 Item    1 					if usgn(diff_x) = 0 and usgn(diff_y) = 0 then
Condition totals: 2 of 2 input terms covered = 100.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  ((<type>)diff_x = 0)         Y
  ((<type>)diff_y = 0)         Y

     Rows:       Hits  FEC Target              Matching input patterns       
 ---------  ---------  --------------------    -------------------------     
  Row   1:   15216751  ((<type>)diff_x = 0)_0  { 0- }                        
  Row   2:      29637  ((<type>)diff_x = 0)_1  { 11 }                        
  Row   3:     632687  ((<type>)diff_y = 0)_0  { 10 }                        
  Row   4:      29637  ((<type>)diff_y = 0)_1  { 11 }                        

NOTE:
  * Order of matching input pattern values: {((<type>)diff_x = 0),((<type>)diff_y = 0)}


Expression Coverage:
    Enabled Coverage        Active   Covered    Misses % Covered
    ----------------        ------      ----    ------ ---------
    FEC Expression Terms         4         1         3      25.0

================================Expression Details================================

Expression Coverage for file rcb.vhd --

----------------Focused Expression View-----------------
Line       332 Item    1 			rcb_finish_1 <= rcb_ready AND (NOT dbb_bus.startcmd) AND (NOT reset) AND is_same;
Expression totals: 1 of 4 input terms covered = 25.0%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
         rcb_ready         N  '_0' not hit             Hit '_0'
  dbb_bus.startcmd         N  '_1' not hit             Hit '_1'
             reset         N  '_1' not hit             Hit '_1'
           is_same         Y

     Rows:       Hits  FEC Target            Matching input patterns       
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  rcb_ready_0           { 0001 }                      
  Row   2:    1182258  rcb_ready_1           { 1001 }                      
  Row   3:    1182258  dbb_bus.startcmd_0    { 1001 }                      
  Row   4:    ***0***  dbb_bus.startcmd_1    { 1101 }                      
  Row   5:    1182258  reset_0               { 1001 }                      
  Row   6:    ***0***  reset_1               { 1011 }                      
  Row   7:          1  is_same_0             { 1000 }                      
  Row   8:    1182258  is_same_1             { 1001 }                      

NOTE:
  * Order of matching input pattern values: {rcb_ready,dbb_bus.startcmd,reset,is_same}


FSM Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    States                       6         6         0     100.0
    Transitions                 20        18         2      90.0

================================FSM Details================================

FSM Coverage for file rcb.vhd --

FSM_ID: rcb_state
    Current State Object : rcb_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 241                idle                   0
 312               clear                   5
 287                move                   1
 299                draw                   4
 260          flush_init                   2
 268          flush_done                   3
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    idle            34199725
                   clear            12991616
                    move               36578
                    draw             2469778
              flush_init             4638236
              flush_done            13914708
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 246                   0             1182259          idle -> flush_init  
 248                   1            31119742          idle -> idle        
 253                   2             1857610          idle -> draw        
 255                   3               20057          idle -> move        
 257                   4               20057          idle -> clear       
 317                   5               20057          clear -> idle       
 320                   6            10144271          clear -> clear      
 324                   7             2827288          clear -> flush_init 
 291                   8               20057          move -> idle        
 293                   9               16521          move -> flush_init  
 303                  11             1857610          draw -> idle        
 305                  12              612168          draw -> flush_init  
 267                  13             4638236          flush_init -> flush_done
 272                  15             1182259          flush_done -> idle  
 276                  16              612168          flush_done -> draw  
 277                  17             2827288          flush_done -> clear 
 278                  18               16521          flush_done -> move  
 284                  19             9276472          flush_done -> flush_done
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 296                  10          move -> move        
 171                  14          flush_init -> idle  


    Summary                 Active      Hits    Misses % Covered
    -------                 ------      ----    ------ ---------
    States                       6         6         0     100.0
    Transitions                 20        18         2      90.0
Toggle Coverage:
    Enabled Coverage        Active      Hits    Misses % Covered
    ----------------        ------      ----    ------ ---------
    Toggle Bins                316       307         9      97.1

================================Toggle Details================================

Toggle Coverage for File rcb.vhd --

       Line                                   Node      1H->0L      0L->1H                          "Coverage"
--------------------------------------------------------------------------------------------------------------
         13                                    clk           1           1                              100.00 
         14                                  reset           1           0                               50.00 
         17                       dbb_bus.startcmd           1           1                              100.00 
         17                     dbb_bus.rcb_cmd(2)           1           1                              100.00 
         17                     dbb_bus.rcb_cmd(1)           1           1                              100.00 
         17                     dbb_bus.rcb_cmd(0)           1           1                              100.00 
         17                           dbb_bus.Y(5)           1           1                              100.00 
         17                           dbb_bus.Y(4)           1           1                              100.00 
         17                           dbb_bus.Y(3)           1           1                              100.00 
         17                           dbb_bus.Y(2)           1           1                              100.00 
         17                           dbb_bus.Y(1)           1           1                              100.00 
         17                           dbb_bus.Y(0)           1           1                              100.00 
         17                           dbb_bus.X(5)           1           1                              100.00 
         17                           dbb_bus.X(4)           1           1                              100.00 
         17                           dbb_bus.X(3)           1           1                              100.00 
         17                           dbb_bus.X(2)           1           1                              100.00 
         17                           dbb_bus.X(1)           1           1                              100.00 
         17                           dbb_bus.X(0)           1           1                              100.00 
         18                           dbb_delaycmd           1           1                              100.00 
         21                               vdout(9)           1           1                              100.00 
         21                               vdout(8)           1           1                              100.00 
         21                               vdout(7)           1           1                              100.00 
         21                               vdout(6)           1           1                              100.00 
         21                               vdout(5)           1           1                              100.00 
         21                               vdout(4)           1           1                              100.00 
         21                               vdout(3)           1           1                              100.00 
         21                               vdout(2)           1           1                              100.00 
         21                              vdout(15)           1           1                              100.00 
         21                              vdout(14)           1           1                              100.00 
         21                              vdout(13)           1           1                              100.00 
         21                              vdout(12)           1           1                              100.00 
         21                              vdout(11)           1           1                              100.00 
         21                              vdout(10)           1           1                              100.00 
         21                               vdout(1)           1           1                              100.00 
         21                               vdout(0)           1           1                              100.00 
         22                                vdin(9)           1           1                              100.00 
         22                                vdin(8)           1           1                              100.00 
         22                                vdin(7)           1           1                              100.00 
         22                                vdin(6)           1           1                              100.00 
         22                                vdin(5)           1           1                              100.00 
         22                                vdin(4)           1           1                              100.00 
         22                                vdin(3)           1           1                              100.00 
         22                                vdin(2)           1           1                              100.00 
         22                               vdin(15)           1           1                              100.00 
         22                               vdin(14)           1           1                              100.00 
         22                               vdin(13)           1           1                              100.00 
         22                               vdin(12)           1           1                              100.00 
         22                               vdin(11)           1           1                              100.00 
         22                               vdin(10)           1           1                              100.00 
         22                                vdin(1)           1           1                              100.00 
         22                                vdin(0)           1           1                              100.00 
         23                                 vwrite           1           1                              100.00 
         24                               vaddr(7)           1           1                              100.00 
         24                               vaddr(6)           1           1                              100.00 
         24                               vaddr(5)           1           1                              100.00 
         24                               vaddr(4)           1           1                              100.00 
         24                               vaddr(3)           1           1                              100.00 
         24                               vaddr(2)           1           1                              100.00 
         24                               vaddr(1)           1           1                              100.00 
         24                               vaddr(0)           1           1                              100.00 
         27                             rcb_finish           1           1                              100.00 
         35                           rcb_finish_1           1           1                              100.00 
         38                                x_in(5)           1           1                              100.00 
         38                                x_in(4)           1           1                              100.00 
         38                                x_in(3)           1           1                              100.00 
         38                                x_in(2)           1           1                              100.00 
         38                                x_in(1)           1           1                              100.00 
         38                                x_in(0)           1           1                              100.00 
         39                                y_in(5)           1           1                              100.00 
         39                                y_in(4)           1           1                              100.00 
         39                                y_in(3)           1           1                              100.00 
         39                                y_in(2)           1           1                              100.00 
         39                                y_in(1)           1           1                              100.00 
         39                                y_in(0)           1           1                              100.00 
         40                        equal_block_out           1           1                              100.00 
         41                     split_word_addr(7)           1           1                              100.00 
         41                     split_word_addr(6)           1           1                              100.00 
         41                     split_word_addr(5)           1           1                              100.00 
         41                     split_word_addr(4)           1           1                              100.00 
         41                     split_word_addr(3)           1           1                              100.00 
         41                     split_word_addr(2)           1           1                              100.00 
         41                     split_word_addr(1)           1           1                              100.00 
         41                     split_word_addr(0)           1           1                              100.00 
         44                        word_reg_out(7)           1           1                              100.00 
         44                        word_reg_out(6)           1           1                              100.00 
         44                        word_reg_out(5)           1           1                              100.00 
         44                        word_reg_out(4)           1           1                              100.00 
         44                        word_reg_out(3)           1           1                              100.00 
         44                        word_reg_out(2)           1           1                              100.00 
         44                        word_reg_out(1)           1           1                              100.00 
         44                        word_reg_out(0)           1           1                              100.00 
         45                         x_clear_reg(5)           1           1                              100.00 
         45                         x_clear_reg(4)           1           1                              100.00 
         45                         x_clear_reg(3)           1           1                              100.00 
         45                         x_clear_reg(2)           1           1                              100.00 
         45                         x_clear_reg(1)           1           1                              100.00 
         45                         x_clear_reg(0)           1           1                              100.00 
         46                         y_clear_reg(5)           1           1                              100.00 
         46                         y_clear_reg(4)           1           1                              100.00 
         46                         y_clear_reg(3)           1           1                              100.00 
         46                         y_clear_reg(2)           1           1                              100.00 
         46                         y_clear_reg(1)           1           1                              100.00 
         46                         y_clear_reg(0)           1           1                              100.00 
         47                       x_clear_start(5)           1           1                              100.00 
         47                       x_clear_start(4)           1           1                              100.00 
         47                       x_clear_start(3)           1           1                              100.00 
         47                       x_clear_start(2)           1           1                              100.00 
         47                       x_clear_start(1)           1           1                              100.00 
         47                       x_clear_start(0)           1           1                              100.00 
         48                       y_clear_start(5)           1           1                              100.00 
         48                       y_clear_start(4)           1           1                              100.00 
         48                       y_clear_start(3)           1           1                              100.00 
         48                       y_clear_start(2)           1           1                              100.00 
         48                       y_clear_start(1)           1           1                              100.00 
         48                       y_clear_start(0)           1           1                              100.00 
         52                           clear_reg_en           1           1                              100.00 
         53                            word_reg_en           1           1                              100.00 
         54                           pixop_reg_en           1           1                              100.00 
         57                              diff_x(5)           1           1                              100.00 
         57                              diff_x(4)           1           1                              100.00 
         57                              diff_x(3)           1           1                              100.00 
         57                              diff_x(2)           1           1                              100.00 
         57                              diff_x(1)           1           1                              100.00 
         57                              diff_x(0)           1           1                              100.00 
         58                              diff_y(5)           1           1                              100.00 
         58                              diff_y(4)           1           1                              100.00 
         58                              diff_y(3)           1           1                              100.00 
         58                              diff_y(2)           1           1                              100.00 
         58                              diff_y(1)           1           1                              100.00 
         58                              diff_y(0)           1           1                              100.00 
         59                              clear_run           1           1                              100.00 
         63                              rcb_state               ENUM type       Value       Count 
                                                                      idle         337      100.00 
                                                                      move           2      100.00 
                                                                flush_init         122      100.00 
                                                                flush_done         122      100.00 
                                                                      draw         457      100.00 
                                                                     clear           1      100.00 
         64                                 nstate               ENUM type       Value       Count 
                                                                      idle         320      100.00 
                                                                      move           1      100.00 
                                                                flush_init         137      100.00 
                                                                flush_done         121      100.00 
                                                                      draw         473      100.00 
                                                                     clear           1      100.00 
         67                 rcb_flush_downcount(7)           0           0                                0.00 
         67                 rcb_flush_downcount(6)           0           0                                0.00 
         67                 rcb_flush_downcount(5)           0           0                                0.00 
         67                 rcb_flush_downcount(4)           1           1                              100.00 
         67                 rcb_flush_downcount(3)           1           1                              100.00 
         67                 rcb_flush_downcount(2)           1           1                              100.00 
         67                 rcb_flush_downcount(1)           1           1                              100.00 
         67                 rcb_flush_downcount(0)           1           1                              100.00 
         68                              rcb_ready           1           1                              100.00 
         71                              rmw_start           1           1                              100.00 
         72                              rmw_delay           0           0                                0.00 
         73                             rmw_vwrite           1           1                              100.00 
         76                                wen_all           1           1                              100.00 
         76                                     pw           1           1                              100.00 
         77                             pixopin(1)           1           1                              100.00 
         77                             pixopin(0)           1           1                              100.00 
         78                              pixnum(3)           1           1                              100.00 
         78                              pixnum(2)           1           1                              100.00 
         78                              pixnum(1)           1           1                              100.00 
         78                              pixnum(0)           1           1                              100.00 
         79                                is_same           1           1                              100.00 

Total Node Count     =        164 
Toggled Node Count   =        159 
Untoggled Node Count =          5 

Toggle Coverage      =       97.1% (307 of 316 bins)


ASSERTION RESULTS:
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
/vdp_testbench/MAIN#immed__165
                     vdp_testbench.vhd(165)       1     -
/vdp_testbench/RAM1/line__35
                     vram.vhd(35)               0     -
/vdp_pack/do_vdp_command#immed__568
                     vdp_pack.vhd(568)          0     -
/vdp_pack/send_vdp_command#immed__365
                     vdp_pack.vhd(365)          0     -
/vdp_pack/send_vdp_command#immed__345
                     vdp_pack.vhd(345)          0     -
/vdp_pack/display_ram#immed__303
                     vdp_pack.vhd(303)          0     -


